package com.inthinc.pro.reports.hos;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.junit.Test;

import com.inthinc.hos.ddl.HosDailyDriverLog;
import com.inthinc.hos.ddl.Recap;
import com.inthinc.hos.ddl.RecapCanada;
import com.inthinc.hos.ddl.RecapCanada2007;
import com.inthinc.hos.ddl.RecapType;
import com.inthinc.hos.ddl.RecapUS;
import com.inthinc.hos.ddl.RemarkLog;
import com.inthinc.hos.ddl.VehicleInfo;
import com.inthinc.hos.model.DayTotals;
import com.inthinc.hos.model.HOSOrigin;
import com.inthinc.hos.model.HOSRecAdjusted;
import com.inthinc.hos.model.HOSStatus;
import com.inthinc.hos.model.RuleSetType;
import com.inthinc.pro.dao.mock.MockHOSDAO;
import com.inthinc.pro.model.Address;
import com.inthinc.pro.model.Status;
import com.inthinc.pro.model.Vehicle;
import com.inthinc.pro.model.VehicleType;
import com.inthinc.pro.model.hos.HOSRecord;
import com.inthinc.pro.reports.BaseUnitTest;
import com.inthinc.pro.reports.FormatType;
import com.inthinc.pro.reports.ReportCriteria;
import com.inthinc.pro.reports.hos.testData.DDLDataSet;

public class HosDriverDailyLogReportCriteriaTest extends BaseUnitTest{

    // these csv files were generated by connecting to the gain db and running the stored proc 
    //   hos_fetchLogsForDriver driverID, startDate, endDate 
    // for example:
    //   hos_fetchLogsForDriver '945463F0-44A8-4B85-9BA3-2EDAD2A9B501', '03/08/2010', '03/31/2010'
    // start date should be 20 days prior to the date you want to run the ddl report for
    // the results should be exported to csv and named test#_ddlStartDate_ddlEndDate_rule<type>
    // the csv file should be copied to test/resources/ddl and added to the list below
    // to compare run the same report for the same driver/date range in gain and copy the resulting pdf
    // to test/resources/ddl/test#Expected.pdf  -- recap, graphs, and remarks should be the same
    public static final String testCaseName[] = {
        "test0_03302010_04012010_rule2",
        "test1_01242010_01312010_rule2",
        "test2_03012010_03052010_rule2",
        "test3_06202010_06302010_rule13",
        "test4_06202010_06302010_rule7",
        "test5_06202010_06302010_rule1",
        "test6_04182010_04202010_rule10",
        "test7_06202010_06302010_rule14",
        "test8_06202010_06302010_rule6",
        "test9_06202010_06302010_rule8",
        "test10_06052010_06152010_rule9",
        "test11_01192010_01212010_rule11",
        "test12_07132010_07172010_personalTime",
        "test13_06062010_06102010_travelTimeOccupant",
        "test14_01242010_01312010_rule16",
    };

    public static final int testDay[] = {
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0
    };
    public HOSRecAdjusted expectedAdjustedList[][]  = {
              {     // test0_03302010_04012010_rule2
                new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1269928800000l),TimeZone.getTimeZone("US/Mountain"),new Date(1269928800000l),480l,0,32,false,"","",480l,RuleSetType.US_OIL, 1),
                new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1269957600000l),TimeZone.getTimeZone("US/Mountain"),new Date(1269957600000l),15l,32,1,false,"","",8l,RuleSetType.US_OIL, null),
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1269958088047l),TimeZone.getTimeZone("US/Mountain"),new Date(1269957600000l),0l,32,0,false,"","",7l,RuleSetType.US_OIL, 1),
                new HOSRecAdjusted("1",HOSStatus.OFF_DUTY,new Date(1269958500000l),TimeZone.getTimeZone("US/Mountain"),new Date(1269958500000l),90l,33,6,false,"","",90l,RuleSetType.US_OIL, 1),
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1269963900000l),TimeZone.getTimeZone("US/Mountain"),new Date(1269963900000l),0l,39,0,false,"","",6l,RuleSetType.US_OIL, null),
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1269964274633l),TimeZone.getTimeZone("US/Central"),new Date(1269963900000l),15l,39,1,false,"","",9l,RuleSetType.US_OIL, 1),
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1269964800000l),TimeZone.getTimeZone("US/Central"),new Date(1269964800000l),840l,40,56,false,"","",840l,RuleSetType.US_OIL, 1),
            },
        {   // test1_01242010_01312010_rule2
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1264316400000l),TimeZone.getTimeZone("US/Mountain"),new Date(1264316400000l),1440l,0,96,false,"","",1440l,RuleSetType.US_OIL, 17),
        },
        {   // test2_03012010_03052010_rule2
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1267426800000l),TimeZone.getTimeZone("US/Mountain"),new Date(1267426800000l),1440l,0,96,false,"","",1440l,RuleSetType.US_OIL, 2),
        },
        {   // test3_06202010_06302010_rule13
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277103600000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277103600000l),345l,0,23,false,"","",345l,RuleSetType.CANADA_2007_OIL, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277124300000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277124300000l),15l,23,1,false,"","",13l,RuleSetType.CANADA_2007_OIL, 1),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277125056083l),TimeZone.getTimeZone("US/Pacific"),new Date(1277124300000l),0l,23,0,false,"","",2l,RuleSetType.CANADA_2007_OIL, 1),
            new HOSRecAdjusted("19",HOSStatus.ON_DUTY,new Date(1277125200000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277125200000l),15l,24,1,false,"","",15l,RuleSetType.CANADA_2007_OIL, 1),
            new HOSRecAdjusted("17",HOSStatus.ON_DUTY,new Date(1277126094000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277126100000l),15l,25,1,false,"380039","",13l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277126845000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277126100000l),0l,25,0,false,"380039","",3l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277127000000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277127000000l),0l,26,0,false,"380039","",4l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277127245000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277127000000l),15l,26,1,false,"380039","",11l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("15",HOSStatus.ON_DUTY,new Date(1277127900000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277127900000l),15l,27,1,false,"380039","",15l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277128800000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277128800000l),15l,28,1,false,"380039","",8l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277129292000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277128800000l),0l,28,0,false,"380039","",7l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("14",HOSStatus.DRIVING,new Date(1277129700000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277129700000l),45l,29,3,false,"380039","",45l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277132400000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277132400000l),0l,32,0,false,"380039","",5l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277132715000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277132400000l),15l,32,1,false,"380039","",10l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("12",HOSStatus.ON_DUTY,new Date(1277133300000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277133300000l),315l,33,21,false,"380039","",315l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277152200000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277152200000l),15l,54,1,false,"380039","",12l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277152946000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277152200000l),0l,54,0,false,"380039","",3l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("11",HOSStatus.DRIVING,new Date(1277153100000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277153100000l),45l,55,3,false,"380039","",45l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277155800000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277155800000l),0l,58,0,false,"380039","",9l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277156371000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277155800000l),15l,58,1,false,"380039","",5l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277156700000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277156700000l),0l,59,0,false,"380039","",6l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("7",HOSStatus.ON_DUTY,new Date(1277157076000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277156700000l),15l,59,1,false,"380039","",8l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("6",HOSStatus.DRIVING,new Date(1277157562000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277156700000l),0l,59,0,false,"380039","",1l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277157649000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277157600000l),15l,60,1,false,"380039","",14l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("4",HOSStatus.ON_DUTY,new Date(1277158500000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277158500000l),15l,61,1,false,"380039","",15l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277159400000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277159400000l),0l,62,0,false,"380039","",7l,RuleSetType.CANADA_2007_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277159790973l),TimeZone.getTimeZone("US/Pacific"),new Date(1277159400000l),15l,62,1,false,"","",8l,RuleSetType.CANADA_2007_OIL, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277160300000l),TimeZone.getTimeZone("US/Pacific"),new Date(1277160300000l),495l,63,33,false,"","",495l,RuleSetType.CANADA_2007_OIL, 1),
        },
        {   // test4_06202010_06302010_rule7
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277010000000l),TimeZone.getTimeZone("US/Central"),new Date(1277010000000l),1440l,0,96,false,"","",1440l,RuleSetType.TEXAS, 32),
        },
        {   // test5_06202010_06302010_rule1
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277010000000l),TimeZone.getTimeZone("US/Central"),new Date(1277010000000l),1440l,0,96,false,"","",1440l,RuleSetType.US, 10),
        },
        {   // test6_04182010_04202010_rule10
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1271570400000l),TimeZone.getTimeZone("US/Mountain"),new Date(1271570400000l),1440l,0,96,false,"","",1440l,RuleSetType.NON_DOT, 6),
        },
        {   // test7_06202010_06302010_rule14
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277013600000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277013600000l),645l,0,43,false,"","",645l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277052300000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277052300000l),15l,43,1,false,"","",12l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277053012000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277052300000l),0l,43,0,false,"","",3l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277053200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277053200000l),0l,44,0,false,"","",2l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("44",HOSStatus.ON_DUTY,new Date(1277053333000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277053200000l),0l,44,0,false,"","",1l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("42",HOSStatus.DRIVING,new Date(1277053412000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277053200000l),0l,44,0,false,"","",5l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277053713000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277053200000l),15l,44,1,false,"","",6l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("41",HOSStatus.ON_DUTY,new Date(1277054100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277054100000l),15l,45,1,false,"","",15l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277055000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277055000000l),15l,46,1,false,"","",13l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277055769000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277055000000l),0l,46,0,false,"","",2l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1277055900000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277055900000l),15l,47,1,false,"","",8l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277056404000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277055900000l),0l,47,0,false,"","",7l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("39",HOSStatus.ON_DUTY,new Date(1277056800000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277056800000l),45l,48,3,false,"","",45l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1277059500000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277059500000l),15l,51,1,false,"","",10l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("38",HOSStatus.DRIVING,new Date(1277060107000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277059500000l),0l,51,0,false,"","",4l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277060373000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277060400000l),660l,52,44,false,"","",660l,RuleSetType.CANADA_2007_60_DEGREES_OIL, 2),
            
        },
        {   // test8_06202010_06302010_rule6
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277006400000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277006400000l),495l,0,33,false,"","",495l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277036100000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277036100000l),0l,33,0,false,"","",2l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1277036197000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277036100000l),15l,33,1,false,"0","",13l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1277037000000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277037000000l),15l,34,1,false,"0","",8l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277037506000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277037000000l),0l,34,0,false,"","",7l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("49",HOSStatus.OFF_DUTY,new Date(1277037900000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277037900000l),225l,35,15,false,"","",225l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277051400000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277051400000l),0l,50,0,false,"","",1l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1277051484000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277051400000l),15l,50,1,false,"","",14l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("48",HOSStatus.ON_DUTY_OCCUPANT,new Date(1277052300000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277052300000l),45l,51,3,false,"","",45l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1277055000000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277055000000l),0l,54,0,false,"","",3l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277055175000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277055000000l),15l,54,1,false,"","",12l,RuleSetType.CANADA_HOME_OFFICE, 3),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277055900000l),TimeZone.getTimeZone("US/Eastern"),new Date(1277055900000l),615l,55,41,false,"","",615l,RuleSetType.CANADA_HOME_OFFICE, 3),
            
        },
        {   // test9_06202010_06302010_rule8
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1277013600000l),TimeZone.getTimeZone("US/Mountain"),new Date(1277013600000l),1440l,0,96,false,"","",1440l,RuleSetType.CANADA_ALBERTA, 1),
        },
        {   // test10_06052010_06152010_rule9
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275710400000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275710400000l),540l,0,36,false,"","",540l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275742800000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"","",1l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("35",HOSStatus.ON_DUTY,new Date(1275742901000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"1","",0l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("34",HOSStatus.DRIVING,new Date(1275742936000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"1","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("33",HOSStatus.ON_DUTY,new Date(1275743309000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"1","",0l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275743329000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),15l,36,1,false,"1","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("32",HOSStatus.DRIVING,new Date(1275743700000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275743700000l),30l,37,2,false,"1","",30l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275745500000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275745500000l),0l,39,0,false,"1","",3l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275745707000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275745500000l),15l,39,1,false,"","",11l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("30",HOSStatus.OFF_DUTY,new Date(1275746400000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275746400000l),450l,40,30,false,"","",450l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275773400000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275773400000l),15l,70,1,false,"","",8l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("28",HOSStatus.ON_DUTY,new Date(1275773932000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275773400000l),0l,70,0,false,"1","",0l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275773956000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275773400000l),0l,70,0,false,"1","",5l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("27",HOSStatus.DRIVING,new Date(1275774300000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275774300000l),30l,71,2,false,"1","",30l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275776100000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275776100000l),0l,73,0,false,"1","",5l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275776437000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275776100000l),15l,73,1,false,"","",9l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275777000000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275777000000l),330l,74,22,false,"","",330l,RuleSetType.CANADA_2007_CYCLE_1, 1),

            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275710400000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275710400000l),540l,0,36,false,"","",540l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275742800000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"","",2l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("35",HOSStatus.ON_DUTY,new Date(1275742901000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"1","",1l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("34",HOSStatus.DRIVING,new Date(1275742936000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),0l,36,0,false,"1","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275743329000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275742800000l),15l,36,1,false,"1","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("32",HOSStatus.DRIVING,new Date(1275743700000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275743700000l),30l,37,2,false,"1","",30l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275745500000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275745500000l),0l,39,0,false,"1","",3l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275745707000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275745500000l),15l,39,1,false,"","",12l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("30",HOSStatus.OFF_DUTY,new Date(1275746400000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275746400000l),450l,40,30,false,"","",450l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275773400000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275773400000l),15l,70,1,false,"","",9l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275773956000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275773400000l),0l,70,0,false,"1","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("27",HOSStatus.DRIVING,new Date(1275774300000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275774300000l),30l,71,2,false,"1","",30l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.DRIVING,new Date(1275776100000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275776100000l),0l,73,0,false,"1","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275776437000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275776100000l),15l,73,1,false,"","",9l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275777000000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1275777000000l),330l,74,22,false,"","",330l,RuleSetType.CANADA_2007_CYCLE_1, 1),
},
        {   // test11_01192010_01212010_rule11
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1263873600000l),TimeZone.getTimeZone("Etc/GMT+4"),new Date(1263873600000l),1440l,0,96,false,"","",1440l,RuleSetType.CANADA_2007_60_DEGREES_CYCLE_1, 2),
                
        },
        {   // test12_07132010_07172010_personalTime
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279087200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279087200000l),360l,0,24,false,"","",360l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279108800000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279108800000l),0l,24,0,false,"","",5l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1279109136000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279108800000l),15l,24,1,false,"","",9l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("14",HOSStatus.ON_DUTY_OCCUPANT,new Date(1279109700000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279109700000l),690l,25,46,false,"","",690l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1279151100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279151100000l),0l,71,0,false,"","",2l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.HOS_PERSONALTIME,new Date(1279151220000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279151100000l),15l,71,1,false,"","",13l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("10",HOSStatus.HOS_PERSONALTIME,new Date(1279152000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279152000000l),105l,72,7,false,"","",105l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.HOS_PERSONALTIME,new Date(1279158300000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279158300000l),0l,79,0,false,"","",12l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279159071000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279158300000l),15l,79,1,false,"","",2l,RuleSetType.CANADA_2007_CYCLE_1, 1),
//            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279159200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279159200000l),240l,80,16,false,"","",240l,RuleSetType.CANADA_2007_CYCLE_1, 1),

            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279087200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279087200000l),360l,0,24,false,"","",360l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279108800000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279108800000l),0l,24,0,false,"","",6l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1279109136000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279108800000l),15l,24,1,false,"","",9l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("14",HOSStatus.ON_DUTY_OCCUPANT,new Date(1279109700000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279109700000l),690l,25,46,false,"","",690l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.ON_DUTY_OCCUPANT,new Date(1279151100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279151100000l),0l,71,0,false,"","",2l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.HOS_PERSONALTIME,new Date(1279151220000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279151100000l),15l,71,1,false,"","",13l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("10",HOSStatus.HOS_PERSONALTIME,new Date(1279152000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279152000000l),105l,72,7,false,"","",105l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.HOS_PERSONALTIME,new Date(1279158300000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279158300000l),0l,79,0,false,"","",13l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279159071000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279158300000l),15l,79,1,false,"","",2l,RuleSetType.CANADA_2007_CYCLE_1, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1279159200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1279159200000l),240l,80,16,false,"","",240l,RuleSetType.CANADA_2007_CYCLE_1, 1),
        
        },
        {   // test13_06062010_06102010_travelTimeOccupant
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275804000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275804000000l),1020l,0,68,true,"","",1020l,RuleSetType.US_OIL, 1),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275865200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275865200000l),0l,68,0,true,"","",1l,RuleSetType.US_OIL, 1),
            new HOSRecAdjusted("55",HOSStatus.ON_DUTY,new Date(1275865260000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275865200000l),0l,68,0,true,"","",2l,RuleSetType.US_OIL, 1),
            new HOSRecAdjusted("generated",HOSStatus.TRAVELTIME_OCCUPANT,new Date(1275865351000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275865200000l),15l,68,1,true,"","",12l,RuleSetType.US_OIL, 5),
            new HOSRecAdjusted("54",HOSStatus.TRAVELTIME_OCCUPANT,new Date(1275866100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275866100000l),150l,69,10,true,"","",150l,RuleSetType.US_OIL, 5),
            new HOSRecAdjusted("generated",HOSStatus.TRAVELTIME_OCCUPANT,new Date(1275875100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275875100000l),0l,79,0,true,"","",12l,RuleSetType.US_OIL, 5),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275875808000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275875100000l),15l,79,1,false,"","",3l,RuleSetType.US_OIL, 5),
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275876000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275876000000l),240l,80,16,false,"","",240l,RuleSetType.US_OIL, 5),
        },
        {   // test14_01242010_01312010_rule16
            new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1264316400000l),TimeZone.getTimeZone("US/Mountain"),new Date(1264316400000l),1440l,0,96,false,"","",1440l,RuleSetType.US_7DAY, 3),
        },
    };
    public HOSRecAdjusted expectedOriginalList[][]  = {
            {     // test0_03302010_04012010_rule2
            },
            {     // test1_01242010_01312010_rule2
            },
            {     // test2_03012010_03052010_rule2
            },
            {     // test3_06202010_06302010_rule13
            },
            {     // test4_06202010_06302010_rule7
            },
            {     // test5_06202010_06302010_rule1
            },
            {     // test6_04182010_04202010_rule10
            },
            {     // test7_06202010_06302010_rule14
            },
            {     // test8_06202010_06302010_rule6
            },
            {     // test9_06202010_06302010_rule8
            },
            {     // test10_06052010_06152010_rule9
            },
            {     // test11_01192010_01212010_rule11
            },
            {     // test12_07132010_07172010_personalTime
            },
            {     // test13_06062010_06102010_travelTimeOccupant
                new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1275804000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275804000000l),1020l,0,68,false,"","",1020l,RuleSetType.US_OIL, 1),
                new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1275865200000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275865200000l),0l,68,0,false,"","",3l,RuleSetType.US_OIL, 1),
                new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1275865351000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275865200000l),15l,68,1,false,"","",12l,RuleSetType.US_OIL, 5),
                new HOSRecAdjusted("54",HOSStatus.ON_DUTY,new Date(1275866100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275866100000l),150l,69,10,false,"","",150l,RuleSetType.US_OIL, 5),
                new HOSRecAdjusted("generated",HOSStatus.ON_DUTY,new Date(1275875100000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275875100000l),15l,79,1,false,"","",12l,RuleSetType.US_OIL, 5),
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275875808000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275875100000l),0l,79,0,false,"","",3l,RuleSetType.US_OIL, 5),
                new HOSRecAdjusted("generated",HOSStatus.OFF_DUTY,new Date(1275876000000l),TimeZone.getTimeZone("US/Mountain"),new Date(1275876000000l),240l,80,16,false,"","",240l,RuleSetType.US_OIL, 5),
            },
            {     // test14_01242010_01312010_rule16
            },
    };
    public Boolean expectedEdited[] = {
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.FALSE,
            Boolean.TRUE,
            Boolean.FALSE,
    };
    
    ExpectedRecap expectedRecap[] = {
            //0 test0_03302010_04012010_rule2
        new ExpectedRecap(RecapType.US,RuleSetType.US_OIL,8,"08.25","00.00","-","177.25","00.00","","",0),
            // 1 test1_01242010_01312010_rule2
        new ExpectedRecap(RecapType.US,RuleSetType.US_OIL,1,"00.00","70.00","-","00.00","70.00","","",0),
            //2 test2_03012010_03052010_rule2
        new ExpectedRecap(RecapType.US,RuleSetType.US_OIL,1,"00.00","70.00","-","00.00","70.00","","",0),
            //3 test3_06202010_06302010_rule13
        null, 
            //4 test4_06202010_06302010_rule7
        new ExpectedRecap(RecapType.US,RuleSetType.TEXAS,1,"00.00","70.00","-","00.00","70.00","","",0),
            //5 test5_06202010_06302010_rule1
        new ExpectedRecap(RecapType.US,RuleSetType.US,1,"00.00","70.00","-","00.00","70.00","","",0),
            //6 test6_04182010_04202010_rule10
        null, 
            //7 test7_06202010_06302010_rule14
        null, 
            //8 test8_06202010_06302010_rule6
        new ExpectedRecap(RecapType.CANADA,RuleSetType.CANADA_HOME_OFFICE,14,"01.50","119.25","01.75","01.75","117.75","02.25","",0),
//        new ExpectedRecap(RecapType.CANADA,RuleSetType.CANADA_HOME_OFFICE,14,"01.50","119.25","01.50","01.50","118.00","02.00","",0),
//        new ExpectedRecap(RecapType.CANADA,RuleSetType.CANADA_HOME_OFFICE,14,"01.50","120.00","00.50","00.50","119.50","00.50","",0),
            //9 test9_06202010_06302010_rule8
        null, 
            //10 test10_06052010_06152010_rule9
//        new ExpectedRecap(RecapType.CANADA_2007,RuleSetType.CANADA_2007_CYCLE_1,6,"01.25","45.00","","","68.75","","26.25",1),
        new ExpectedRecap(RecapType.CANADA_2007,RuleSetType.CANADA_2007_CYCLE_1,6,"01.25","44.50","","","68.75","","26.75",1),
            //11 test11_01192010_01212010_rule11
        new ExpectedRecap(RecapType.CANADA_2007,RuleSetType.CANADA_2007_60_DEGREES_CYCLE_1,1,"00.00","80.00","","","80.00","","00.00",1),
            //12 test12_07132010_07172010_personalTime
        new ExpectedRecap(RecapType.CANADA_2007,RuleSetType.CANADA_2007_CYCLE_1,3,"11.75","48.25","","","36.50","","33.50",1),
            //13 test13_06062010_06102010_travelTimeOccupant
        new ExpectedRecap(RecapType.US,RuleSetType.US_OIL,1,"00.00","70.00","-","00.00","70.00","","",0),
            // 14 test14_01242010_01312010_rule16
        new ExpectedRecap(RecapType.US,RuleSetType.US_7DAY,1,"00.00","60.00","00.00","-","60.00","","",0),
    };
    
    @Test
    public void gainTestCases() {
        for (int testCaseCnt = 0; testCaseCnt < testCaseName.length; testCaseCnt++) {
//        int testCaseCnt = 14;
//        {
            DDLDataSet ddlTestData = new DDLDataSet(testCaseName[testCaseCnt]);
            HosDailyDriverLogReportCriteria hosDailyDriverLogReportCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
            Address address = new Address();
            address.setAddr1("address 1");
            address.setCity("city");
            address.setZip("84120");
            hosDailyDriverLogReportCriteria.initCriteriaList(ddlTestData.interval, ddlTestData.hosRecordList, ddlTestData.hosVehicleDayDataList,
                ddlTestData.hosOccupantLogList, ddlTestData.driver, ddlTestData.account, ddlTestData.group.getAddress());
            
            // check the data
            List<ReportCriteria> criteriaList = hosDailyDriverLogReportCriteria.getCriteriaList();
            assertEquals("expected one ReportCriteria item for each day", ddlTestData.numDays, criteriaList.size());
            
            int dayIdx = testDay[testCaseCnt];
            HosDailyDriverLog hosDailyDriverLog = (HosDailyDriverLog)criteriaList.get(dayIdx).getMainDataset().get(0);

            dump("DDL", testCaseCnt, hosDailyDriverLogReportCriteria.getCriteriaList(), FormatType.PDF);
            dump("DDL", testCaseCnt, hosDailyDriverLogReportCriteria.getCriteriaList(), FormatType.HTML);
            
            List<HOSRecAdjusted> correctedList =  hosDailyDriverLog.getCorrectedGraphList();
            assertEquals(testCaseCnt + " corrected list size ", expectedAdjustedList[testCaseCnt].length, correctedList.size());
            int recCnt = 0;
            for (HOSRecAdjusted adjustedRec : correctedList) {
//adjustedRec.dump();                
                compareHOSRecAdjusted(expectedAdjustedList[testCaseCnt][recCnt], adjustedRec, recCnt, testCaseCnt);
                recCnt++;
            }
            assertEquals("day edited testcase " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedEdited[testCaseCnt], hosDailyDriverLog.getEdited());
            List<HOSRecAdjusted> originalList = hosDailyDriverLog.getOriginalGraphList();
            if (hosDailyDriverLog.getEdited()) {
                recCnt = 0;
                for (HOSRecAdjusted originalRec : originalList) {
//originalRec.dump();                
                    compareHOSRecAdjusted(expectedOriginalList[testCaseCnt][recCnt], originalRec, recCnt, testCaseCnt);
                    recCnt++;
                }
            }
            else {
                assertNull("original list should be null for " + testCaseCnt + " " +testCaseName[testCaseCnt], originalList);
            }
            
            
            List<Recap> recapList = hosDailyDriverLog.getRecap();
            if (recapList == null) {
                assertEquals("expected null recap for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt], null);
            }
            else {
                Recap baseRecap = recapList.get(0);
                assertEquals("expected recap type for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].recapType, baseRecap.getRecapType());
                assertEquals("expected ruleset recap type for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].ruleSetType, baseRecap.getRuleSetType());
                if (baseRecap.getRecapType() == RecapType.US) {
                    RecapUS recap = (RecapUS)baseRecap;
                    assertEquals("expected recap day for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].day, recap.getDay());
                    assertEquals("expected recap hours worked for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorkedToday, recap.getHoursWorkedToday());
                    assertEquals("expected recap hours avail for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursAvailToday, recap.getHoursAvailToday());
                    assertEquals("expected recap hours worked 7 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorked7Days, recap.getHoursWorked7Days());
                    assertEquals("expected recap hours worked 8 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorked8Days, recap.getHoursWorked8Days());
                    assertEquals("expected recap hours avail tomorrow for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursAvailTomorrow, recap.getHoursAvailTomorrow());
                }
                else if (baseRecap.getRecapType() == RecapType.CANADA) {
                    RecapCanada recap = (RecapCanada)baseRecap;
             
                    assertEquals("expected recap hours worked for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorkedToday, recap.getHoursWorkedToday());
                    assertEquals("expected recap hours avail for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursAvailToday, recap.getHoursAvailToday());
                    assertEquals("expected recap hours worked 7 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorked7Days, recap.getHoursWorked7Days());
                    assertEquals("expected recap hours worked 8 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorked8Days, recap.getHoursWorked8Days());
                    assertEquals("expected recap hours worked 14 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorked14Days, recap.getHoursWorked14Days());
                    assertEquals("expected recap hours avail tomorrow for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursAvailTomorrow, recap.getHoursAvailTomorrow());
                }
                else if (baseRecap.getRecapType() == RecapType.CANADA_2007) {
                    RecapCanada2007 recap = (RecapCanada2007)baseRecap;
                    assertEquals("expected recap day for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].day, recap.getDay());
                    assertEquals("expected recap hours worked for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorkedToday, recap.getHoursWorkedToday());
                    assertEquals("expected recap hours avail for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursAvailToday, recap.getHoursAvailToday());
                    assertEquals("expected recap hours avail tomorrow for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursAvailTomorrow, recap.getHoursAvailTomorrow());
                    assertEquals("expected recap hours worked cycle for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].hoursWorkedCycle, recap.getHoursWorkedCycle());
                    assertEquals("expected recap hours worked cycle for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap[testCaseCnt].cycle, recap.getCycle());
                    
                }
            }
            
            for (int day = 0; day < criteriaList.size(); day++ ) {
                hosDailyDriverLog = (HosDailyDriverLog)criteriaList.get(day).getMainDataset().get(0);
                checkDayTotals(testCaseName[testCaseCnt], hosDailyDriverLog.getCorrectedDayTotals());
                if (hosDailyDriverLog.getOriginalDayTotals() != null)
                    checkDayTotals(testCaseName[testCaseCnt], hosDailyDriverLog.getOriginalDayTotals());
            }
            

        }
    }
    @Test
    public void USRecap() {
        int testCaseCnt = 14;
        int dayIdx = 3;
        DDLDataSet ddlTestData = new DDLDataSet(testCaseName[testCaseCnt]);
        HosDailyDriverLogReportCriteria hosDailyDriverLogReportCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
        Address address = new Address();
        address.setAddr1("address 1");
        address.setCity("city");
        address.setZip("84120");
        hosDailyDriverLogReportCriteria.initCriteriaList(ddlTestData.interval, ddlTestData.hosRecordList, ddlTestData.hosVehicleDayDataList,
                ddlTestData.hosOccupantLogList, ddlTestData.driver, ddlTestData.account, ddlTestData.group.getAddress());
            
        // check the data
        List<ReportCriteria> criteriaList = hosDailyDriverLogReportCriteria.getCriteriaList();
        HosDailyDriverLog hosDailyDriverLog = (HosDailyDriverLog)criteriaList.get(dayIdx).getMainDataset().get(0);
        ExpectedRecap expectedRecapList [] = {
                 new ExpectedRecap(RecapType.US,RuleSetType.US_7DAY,3,
                "24.00","24.00","60.00","-","00.00","","",0),
                new ExpectedRecap(RecapType.US,RuleSetType.US_7DAY,3,
                        "24.00","24.00","60.00","-","00.00","","",0),
        };

        List<Recap> recapList = hosDailyDriverLog.getRecap();
        Recap baseRecap = recapList.get(0);
        for (ExpectedRecap expectedRecap : expectedRecapList) {
        
        assertEquals("expected recap type for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.recapType, baseRecap.getRecapType());
        assertEquals("expected ruleset recap type for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.ruleSetType, baseRecap.getRuleSetType());
        if (baseRecap.getRecapType() == RecapType.US) {
            RecapUS recap = (RecapUS)baseRecap;
            assertEquals("expected recap day for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.day, recap.getDay());
            assertEquals("expected recap hours worked for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.hoursWorkedToday, recap.getHoursWorkedToday());
            assertEquals("expected recap hours avail for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.hoursAvailToday, recap.getHoursAvailToday());
            assertEquals("expected recap hours worked 7 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.hoursWorked7Days, recap.getHoursWorked7Days());
            assertEquals("expected recap hours worked 8 days for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.hoursWorked8Days, recap.getHoursWorked8Days());
            assertEquals("expected recap hours avail tomorrow for " + testCaseCnt + " " +testCaseName[testCaseCnt], expectedRecap.hoursAvailTomorrow, recap.getHoursAvailTomorrow());
        }
        
        dayIdx++;
        }
    }
    
    private void checkDayTotals(String testCaseName, DayTotals dayTotals) {
        int total = dayTotals.getDriving() + dayTotals.getOffDuty() + dayTotals.getSleeperBerth() + dayTotals.getOnDuty();
        assertEquals(testCaseName + " dayTotals totals are full day ", 96, dayTotals.getTotal());
        assertEquals(testCaseName + " dayTotals totals match ", total, dayTotals.getTotal());
    }

    HOSRecord[] hosRecords = {
            new HOSRecord(1l, 1, RuleSetType.US, null, null, false, 
                    0l, new Date(), new Date(), TimeZone.getDefault(), HOSStatus.DRIVING,
                    HOSOrigin.KIOSK, "slc", 0.0f, 0.0f, 0l, null, null, true, true, "", false, 0f,0f),
             new HOSRecord(1l, 1, RuleSetType.US, null, null, false, 
                            0l, new Date(), new Date(), TimeZone.getDefault(), HOSStatus.ON_DUTY,
                            HOSOrigin.PORTAL, "slc", 0.0f, 0.0f, 0l, null, null, true, true, "", false, 0f, 0f),
             new HOSRecord(1l, 1, RuleSetType.US, null, null, false, 
                                    0l, new Date(), new Date(), TimeZone.getDefault(), HOSStatus.ON_DUTY,
                                    HOSOrigin.DEVICE, "slc", 0.0f, 0.0f, 0l, null, null, true, false, "", false, 0f, 0f),
    };

    RemarkLog[] expectedRemarkLogs = {
            new RemarkLog(HOSStatus.DRIVING, new Date(), TimeZone.getDefault(), true, "slc", "slc", false, 0l, "Driving", false, "Driver Kiosk"), 
            new RemarkLog(HOSStatus.ON_DUTY, new Date(), TimeZone.getDefault(), true, "slc", "slc", false, 0l, "On Duty - Not Driving", false, ""), 
            new RemarkLog(HOSStatus.ON_DUTY, new Date(), TimeZone.getDefault(), true, "slc", "slc", false, 0l, "On Duty - Not Driving", false, ""), 
            
    };
    
    @Test
    public void remarks() {
        HosDailyDriverLogReportCriteria ddlCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
        assertNotNull("resource bundle should be initialized", ddlCriteria.getResourceBundle());
        int cnt = 0;
        for (HOSRecord hosRecord : hosRecords) {
            hosRecord.setOriginalLocation(hosRecord.getLocation());
            RemarkLog remarkLog = ddlCriteria.populateRemarkLog(hosRecord);
            compareRemarkLog(cnt, expectedRemarkLogs[cnt], remarkLog);
            cnt++;
        }
        cnt = 0;
        for (HOSRecord hosRecord : hosRecords) {
            String editedLocation = hosRecord.getLocation() + "xx"; 
            hosRecord.setLocation(editedLocation);
            hosRecord.setEdited(true);
            expectedRemarkLogs[cnt].setLocation(editedLocation);
            expectedRemarkLogs[cnt].setLocationEdited(true);
            RemarkLog remarkLog = ddlCriteria.populateRemarkLog(hosRecord);
            compareRemarkLog(cnt, expectedRemarkLogs[cnt], remarkLog);
            cnt++;
        }
    }

    private void compareRemarkLog(int cnt, RemarkLog expectedRemarkLog, RemarkLog remarkLog) {
        assertEquals(cnt + " isDeleted", expectedRemarkLog.getDeleted(), remarkLog.getDeleted());
        assertEquals(cnt + " Editor", expectedRemarkLog.getEditor(), remarkLog.getEditor());
        assertEquals(cnt + " Location", expectedRemarkLog.getLocation(), remarkLog.getLocation());
        assertEquals(cnt + " LocationEdited", expectedRemarkLog.getLocationEdited(), remarkLog.getLocationEdited());
        assertEquals(cnt + " OriginalLocation", expectedRemarkLog.getOriginalLocation(), remarkLog.getOriginalLocation());
        assertEquals(cnt + " Status", expectedRemarkLog.getStatus(), remarkLog.getStatus());
    }

    private void compareHOSRecAdjusted(HOSRecAdjusted expectedRec, HOSRecAdjusted rec, int recCnt, int testCaseCnt) {
        String prefix = "testcase: " + testCaseCnt + " " + testCaseName[testCaseCnt] + " adjustedRec [" +recCnt + "] field: "; 
        assertEquals(prefix+"ID ", expectedRec.getId(), rec.getId()); 
        assertEquals(prefix+"Status ", expectedRec.getStatus(), rec.getStatus()); 
//        assertEquals(prefix+"LogTimeDate ", expectedRec.getLogTimeDate(), rec.getLogTimeDate()); 
//        assertEquals(prefix+"LogTimeZone ", expectedRec.getLogTimeZone(),  rec.getLogTimeZone());
        assertEquals(prefix+"AdjustedTime ", expectedRec.getAdjustedTime(), rec.getAdjustedTime()); 
        assertEquals(prefix+"TotalAdjustedMinutes ", expectedRec.getTotalAdjustedMinutes(), rec.getTotalAdjustedMinutes()); 
        assertEquals(prefix+"StartIncrement ", expectedRec.getStartIncrement(), rec.getStartIncrement()); 
        assertEquals(prefix+"TotalIncrements ", expectedRec.getTotalIncrements(), rec.getTotalIncrements()); 
        assertEquals(prefix+"Edited ", expectedRec.isEdited(), rec.isEdited()); 
        assertEquals(prefix+"ServiceID ", expectedRec.getServiceID(), rec.getServiceID()); 
        assertEquals(prefix+"TrailerID ", expectedRec.getTrailerID(), rec.getTrailerID()); 
        assertEquals(prefix+"TotalRealMinutes ", expectedRec.getTotalRealMinutes(), rec.getTotalRealMinutes()); 
        assertEquals(prefix+"RuleType ", expectedRec.getRuleType(), rec.getRuleType()); 
    }




    @Test
    public void vehicleInfo() {
        HosDailyDriverLogReportCriteria ddlCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
        
        ddlCriteria.setHosDAO(new MockHOSDAO());
        ddlCriteria.getVehicleMap().put(MockHOSDAO.MOCK_VEHICLE_ID1, new Vehicle(MockHOSDAO.MOCK_VEHICLE_ID1, 1, Status.ACTIVE, MockHOSDAO.MOCK_VEHICLE_ID1+"", "", "", 2000, "", VehicleType.HEAVY, "", null, null, null));
        ddlCriteria.getVehicleMap().put(MockHOSDAO.MOCK_VEHICLE_ID2, new Vehicle(MockHOSDAO.MOCK_VEHICLE_ID2, 1, Status.ACTIVE, MockHOSDAO.MOCK_VEHICLE_ID2+"", "", "", 2000, "", VehicleType.HEAVY, "", null, null, null));
        
        LocalDate localDate = new LocalDate(new DateTime());
        DateTime day = localDate.toDateTimeAtStartOfDay();
        System.out.println("day: " + day);
        
        List<HOSRecAdjusted> logListForDay = new ArrayList<HOSRecAdjusted>();
        // on duty 2 hours in vehicle 1
        logListForDay.add(new HOSRecAdjusted("1",HOSStatus.ON_DUTY, day.toDate(), TimeZone.getTimeZone("US/Mountain"), day.toDate(),60l,0,8,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        // driving 1 hour in vehicle 1
        logListForDay.add(new HOSRecAdjusted("2",HOSStatus.DRIVING, day.plusHours(2).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(2).toDate(),60l,8,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        // off duty 1 hour
        logListForDay.add(new HOSRecAdjusted("3",HOSStatus.OFF_DUTY, day.plusHours(3).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(3).toDate(),60l,12,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        // occupant 1 hour in vehicle 2
        logListForDay.add(new HOSRecAdjusted("4",HOSStatus.ON_DUTY_OCCUPANT, day.plusHours(4).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(4).toDate(),60l,16,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        // off duty 1 hour from portal
        logListForDay.add(new HOSRecAdjusted("5",HOSStatus.OFF_DUTY, day.plusHours(5).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(5).toDate(),60l,20,4,false,"","",60l,RuleSetType.US_OIL, 0));
        // off duty rest of day
        logListForDay.add(new HOSRecAdjusted("6",HOSStatus.OFF_DUTY, day.plusHours(6).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(6).toDate(),1080l,24,72,false,"","",1080l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        
        // matching hosRecords
        List<HOSRecord> hosRecordList = new ArrayList<HOSRecord>();
        for (HOSRecAdjusted rec : logListForDay) {
            Integer vehicleID = (Integer)(rec.getVehicleID());
            long vehicleOdometer = vehicleID * 100l;
            hosRecordList.add(new HOSRecord(Integer.valueOf(rec.getId()), MockHOSDAO.MOCK_DRIVER_ID1, 
                    rec.getRuleType(), vehicleID, vehicleID+"", true, 
                    vehicleOdometer, rec.getLogTimeDate(), rec.getLogTimeDate(), rec.getLogTimeZone(), rec.getStatus(), HOSOrigin.DEVICE, "test location", 0f, 0f, 1000l,
                    "", "", true, false, "", false, 0f, 0f));
        }
        List<VehicleInfo> vehicleInfoList =  ddlCriteria.initVehicleInfoForDay(day, MockHOSDAO.MOCK_DRIVER_ID1, logListForDay, hosRecordList);
        
        assertEquals("Number of vehicles for driver for day", 2, vehicleInfoList.size());
        VehicleInfo vehicle1Info = null;
        VehicleInfo vehicle2Info = null;
        if (vehicleInfoList.get(0).getVehicleID().equals(MockHOSDAO.MOCK_VEHICLE_ID1)) {
            vehicle1Info = vehicleInfoList.get(0); 
            vehicle2Info = vehicleInfoList.get(1); 
        }
        else {
            vehicle1Info = vehicleInfoList.get(1); 
            vehicle2Info = vehicleInfoList.get(0); 
        }

        assertEquals("Vehicle 1 Miles", MockHOSDAO.VEHICLE1_MILEAGE, vehicle1Info.getVehicleMiles());
        assertEquals("Vehicle 2 Miles", MockHOSDAO.VEHICLE2_MILEAGE, vehicle2Info.getVehicleMiles());

        assertEquals("Vehicle 1 Driver Miles", MockHOSDAO.VEHICLE1_MILEAGE, vehicle1Info.getDriverMiles());
        assertEquals("Vehicle 2 Driver Miles", 0L, vehicle2Info.getDriverMiles());

        assertEquals("Vehicle 1 Odometer", MockHOSDAO.MOCK_VEHICLE_ID1*100l, vehicle1Info.getStartOdometer());
        assertEquals("Vehicle 2 odometer", MockHOSDAO.MOCK_VEHICLE_ID2*100l, vehicle2Info.getStartOdometer());
    }

    @Test
    public void vehicleInfoNoVehicleStatus() {
        HosDailyDriverLogReportCriteria ddlCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
        
        ddlCriteria.setHosDAO(new MockHOSDAO());
        ddlCriteria.getVehicleMap().put(MockHOSDAO.MOCK_VEHICLE_ID1, new Vehicle(MockHOSDAO.MOCK_VEHICLE_ID1, 1, Status.ACTIVE, MockHOSDAO.MOCK_VEHICLE_ID1+"", "", "", 2000, "", VehicleType.HEAVY, "", null, null, null));
        ddlCriteria.getVehicleMap().put(MockHOSDAO.MOCK_VEHICLE_ID2, new Vehicle(MockHOSDAO.MOCK_VEHICLE_ID2, 1, Status.ACTIVE, MockHOSDAO.MOCK_VEHICLE_ID2+"", "", "", 2000, "", VehicleType.HEAVY, "", null, null, null));
        
        LocalDate localDate = new LocalDate(new DateTime());
        DateTime day = localDate.toDateTimeAtStartOfDay();
        System.out.println("day: " + day);
        
        List<HOSRecAdjusted> logListForDay = new ArrayList<HOSRecAdjusted>();
        // on duty 2 hours in vehicle 1
        logListForDay.add(new HOSRecAdjusted("1",HOSStatus.ON_DUTY, day.toDate(), TimeZone.getTimeZone("US/Mountain"), day.toDate(),60l,0,8,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        // driving 1 hour in vehicle 1
        logListForDay.add(new HOSRecAdjusted("2",HOSStatus.OFF_DUTY_AT_WELL, day.plusHours(2).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(2).toDate(),60l,8,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        // off duty 1 hour
        logListForDay.add(new HOSRecAdjusted("3",HOSStatus.OFF_DUTY, day.plusHours(3).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(3).toDate(),60l,12,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        // occupant 1 hour in vehicle 2
        logListForDay.add(new HOSRecAdjusted("4",HOSStatus.ON_DUTY, day.plusHours(4).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(4).toDate(),60l,16,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        // off duty 1 hour from portal
        logListForDay.add(new HOSRecAdjusted("5",HOSStatus.OFF_DUTY, day.plusHours(5).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(5).toDate(),60l,20,4,false,"","",60l,RuleSetType.US_OIL, 0));
        // off duty rest of day
        logListForDay.add(new HOSRecAdjusted("6",HOSStatus.OFF_DUTY, day.plusHours(6).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(6).toDate(),1080l,24,72,false,"","",1080l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        
        // matching hosRecords
        List<HOSRecord> hosRecordList = new ArrayList<HOSRecord>();
        for (HOSRecAdjusted rec : logListForDay) {
            Integer vehicleID = (Integer)(rec.getVehicleID());
            long vehicleOdometer = vehicleID * 100l;
            hosRecordList.add(new HOSRecord(Integer.valueOf(rec.getId()), MockHOSDAO.MOCK_DRIVER_ID1, 
                    rec.getRuleType(), vehicleID, vehicleID+"", true, 
                    vehicleOdometer, rec.getLogTimeDate(), rec.getLogTimeDate(), rec.getLogTimeZone(), rec.getStatus(), HOSOrigin.DEVICE, "test location", 0f, 0f, 1000l,
                    "", "", true, false, "", false, 0f, 0f));
        }
        List<VehicleInfo> vehicleInfoList =  ddlCriteria.initVehicleInfoForDay(day, MockHOSDAO.MOCK_DRIVER_ID1, logListForDay, hosRecordList);
        
        assertEquals("Number of vehicles for driver for day", 0, vehicleInfoList.size());
    }


    private static final long ONE_HOUR = 3600000L;
    @Test
    public void originalTimeChange() {
        DDLDataSet ddlTestData = new DDLDataSet(testCaseName[0]);
        HosDailyDriverLogReportCriteria ddlCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
        
        ddlCriteria.setHosDAO(new MockHOSDAO());
        ddlCriteria.getVehicleMap().put(MockHOSDAO.MOCK_VEHICLE_ID1, new Vehicle(MockHOSDAO.MOCK_VEHICLE_ID1, 1, Status.ACTIVE, MockHOSDAO.MOCK_VEHICLE_ID1+"", "", "", 2000, "", VehicleType.HEAVY, "", null, null, null));
        ddlCriteria.getVehicleMap().put(MockHOSDAO.MOCK_VEHICLE_ID2, new Vehicle(MockHOSDAO.MOCK_VEHICLE_ID2, 1, Status.ACTIVE, MockHOSDAO.MOCK_VEHICLE_ID2+"", "", "", 2000, "", VehicleType.HEAVY, "", null, null, null));
        
        LocalDate localDate = new LocalDate(new DateTime().minusDays(1));
        DateTime day = localDate.toDateTimeAtStartOfDay();
        LocalDate localDate2 = new LocalDate(new DateTime());
        DateTime day2 = localDate2.toDateTimeAtStartOfDay();
        
        List<HOSRecAdjusted> logListForDay = new ArrayList<HOSRecAdjusted>();
        logListForDay.add(new HOSRecAdjusted("1",HOSStatus.ON_DUTY, day.toDate(), TimeZone.getTimeZone("US/Mountain"), day.toDate(),60l,0,8,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        logListForDay.add(new HOSRecAdjusted("2",HOSStatus.DRIVING, day.plusHours(2).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(2).toDate(),60l,8,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        logListForDay.add(new HOSRecAdjusted("3",HOSStatus.OFF_DUTY, day.plusHours(3).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(3).toDate(),60l,12,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        logListForDay.add(new HOSRecAdjusted("4",HOSStatus.ON_DUTY_OCCUPANT, day.plusHours(4).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(4).toDate(),60l,16,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        logListForDay.add(new HOSRecAdjusted("5",HOSStatus.OFF_DUTY_OCCUPANT, day.plusHours(5).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(5).toDate(),60l,20,4,false,"","",60l,RuleSetType.US_OIL, 0));
        logListForDay.add(new HOSRecAdjusted("6",HOSStatus.ON_DUTY, day.plusHours(6).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(6).toDate(),1080l,24,72,false,"","",1080l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));

        List<HOSRecAdjusted> expOriginalLogListForDay = new ArrayList<HOSRecAdjusted>();
        expOriginalLogListForDay.add(new HOSRecAdjusted("1",HOSStatus.ON_DUTY, day.toDate(), TimeZone.getTimeZone("US/Mountain"), day.toDate(),60l,0,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        expOriginalLogListForDay.add(new HOSRecAdjusted("2",HOSStatus.DRIVING, day.plusHours(1).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(1).toDate(),60l,8,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        expOriginalLogListForDay.add(new HOSRecAdjusted("3",HOSStatus.OFF_DUTY, day.plusHours(2).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(2).toDate(),60l,12,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        expOriginalLogListForDay.add(new HOSRecAdjusted("4",HOSStatus.ON_DUTY_OCCUPANT, day.plusHours(3).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(3).toDate(),60l,16,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        expOriginalLogListForDay.add(new HOSRecAdjusted("5",HOSStatus.OFF_DUTY_OCCUPANT, day.plusHours(4).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(4).toDate(),60l,20,4,false,"","",60l,RuleSetType.US_OIL, 0));
        expOriginalLogListForDay.add(new HOSRecAdjusted("6",HOSStatus.ON_DUTY, day.plusHours(5).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(5).toDate(),1140l,24,72,false,"","",1080l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        
        List<HOSRecAdjusted> expCorrectedLogListForDay = new ArrayList<HOSRecAdjusted>();
        expCorrectedLogListForDay.add(new HOSRecAdjusted("1",HOSStatus.ON_DUTY, day.toDate(), TimeZone.getTimeZone("US/Mountain"), day.toDate(),60l,0,8,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        expCorrectedLogListForDay.add(new HOSRecAdjusted("2",HOSStatus.DRIVING, day.plusHours(2).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(2).toDate(),60l,8,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        expCorrectedLogListForDay.add(new HOSRecAdjusted("3",HOSStatus.OFF_DUTY, day.plusHours(3).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(3).toDate(),60l,12,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID1));
        expCorrectedLogListForDay.add(new HOSRecAdjusted("4",HOSStatus.ON_DUTY_OCCUPANT, day.plusHours(4).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(4).toDate(),60l,16,4,false,"","",60l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        expCorrectedLogListForDay.add(new HOSRecAdjusted("5",HOSStatus.OFF_DUTY_OCCUPANT, day.plusHours(5).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(5).toDate(),60l,20,4,false,"","",60l,RuleSetType.US_OIL, 0));
        expCorrectedLogListForDay.add(new HOSRecAdjusted("6",HOSStatus.ON_DUTY, day.plusHours(6).toDate(), TimeZone.getTimeZone("US/Mountain"), day.plusHours(6).toDate(),1080l,24,72,false,"","",1080l,RuleSetType.US_OIL, MockHOSDAO.MOCK_VEHICLE_ID2));
        
        // matching hosRecords
        List<HOSRecord> hosRecordList = new ArrayList<HOSRecord>();
        for (HOSRecAdjusted rec : logListForDay) {
            Integer vehicleID = (Integer)(rec.getVehicleID());

            long vehicleOdometer = vehicleID * 100l;
            HOSRecord hosRecord = new HOSRecord(Integer.valueOf(rec.getId()), ddlTestData.driver.getDriverID(), 
                    rec.getRuleType(), vehicleID, vehicleID+"", true, 
                    vehicleOdometer, rec.getLogTimeDate(), rec.getLogTimeDate(), rec.getLogTimeZone(), rec.getStatus(), HOSOrigin.DEVICE, "test location", 0f, 0f, 1000l,
                    "", "", true, true, "EDITOR", false, 0f, 0f);
            hosRecord.setOriginalLogTime(new Date(hosRecord.getLogTime().getTime() - ONE_HOUR));
            hosRecordList.add(hosRecord);
        }

        Interval interval = new Interval(day.toDateTime(DateTimeZone.getDefault()), day2.toDateTime(DateTimeZone.getDefault()));

        ddlCriteria.initCriteriaList(interval, hosRecordList, 
                null, 
                ddlTestData.hosOccupantLogList, ddlTestData.driver, ddlTestData.account, ddlTestData.group.getAddress());
        
        dump("DDL", 66, ddlCriteria.getCriteriaList(), FormatType.PDF);
        
        HosDailyDriverLog hosDailyDriverLog = (HosDailyDriverLog)ddlCriteria.getCriteriaList().get(0).getMainDataset().get(0);

        List<HOSRecAdjusted> originalList =  hosDailyDriverLog.getOriginalGraphList();
        assertEquals("list size ", expOriginalLogListForDay.size(), originalList.size());
        int i = 0;
        for (HOSRecAdjusted original : originalList) {
            HOSRecAdjusted expected = expOriginalLogListForDay.get(i++);
            assertEquals("adjusted time", expected.getAdjustedTime(), original.getAdjustedTime());
            assertEquals("status", expected.getStatus(), original.getStatus());
        }

        List<HOSRecAdjusted> correctedList =  hosDailyDriverLog.getCorrectedGraphList();
        assertEquals("list size ", expCorrectedLogListForDay.size(), correctedList.size());
        i = 0;
        for (HOSRecAdjusted corrected : correctedList) {
            HOSRecAdjusted expected = expCorrectedLogListForDay.get(i++);
            assertEquals("adjusted time", expected.getAdjustedTime(), corrected.getAdjustedTime());
            assertEquals("status", expected.getStatus(), corrected.getStatus());
        }
        
        // move driving record to previous day
        HOSRecord hosRecord = hosRecordList.get(1);
        hosRecord.setLogTime(new DateTime(hosRecord.getLogTime()).minusDays(1).toDate());
        expCorrectedLogListForDay.remove(1);

        interval = new Interval(day.toDateTime(DateTimeZone.getDefault()).minusDays(1), day2.toDateTime(DateTimeZone.getDefault()));
        
        ddlCriteria.initCriteriaList(interval, hosRecordList, 
                null, 
                ddlTestData.hosOccupantLogList, ddlTestData.driver, ddlTestData.account, ddlTestData.group.getAddress());
        
        dump("DDL", 77, ddlCriteria.getCriteriaList(), FormatType.PDF);
        
        hosDailyDriverLog = (HosDailyDriverLog)ddlCriteria.getCriteriaList().get(1).getMainDataset().get(0);
        
        originalList =  hosDailyDriverLog.getOriginalGraphList();
        assertEquals("list size ", expOriginalLogListForDay.size(), originalList.size());
        i = 0;
        for (HOSRecAdjusted original : originalList) {
            HOSRecAdjusted expected = expOriginalLogListForDay.get(i++);
            assertEquals(i + " adjusted time", expected.getAdjustedTime(), original.getAdjustedTime());
            assertEquals(i + " status", expected.getStatus(), original.getStatus());
        }

        correctedList =  hosDailyDriverLog.getCorrectedGraphList();
        assertEquals("list size ", expCorrectedLogListForDay.size(), correctedList.size());
        i = 0;
        for (HOSRecAdjusted corrected : correctedList) {
            HOSRecAdjusted expected = expCorrectedLogListForDay.get(i++);
            assertEquals(i + " adjusted time", expected.getAdjustedTime(), corrected.getAdjustedTime());
            assertEquals(i + " status", expected.getStatus(), corrected.getStatus());
        }
        
    }

    
    
    class ExpectedRecap {
        
        // all
        RecapType recapType;
        RuleSetType ruleSetType;
        Integer day;
        String hoursWorkedToday;
        
        // US, CANADA
        String hoursAvailToday;
        String hoursWorked7Days;
        String hoursWorked8Days;
        String hoursAvailTomorrow;

        // CANADA
        String hoursWorked14Days;
        
        // CANADA2007
        String hoursWorkedCycle;
        int cycle;

        public ExpectedRecap(RecapType recapType,RuleSetType ruleSetType,
                Integer day, String hoursWorkedToday, String hoursAvailToday, String hoursWorked7Days, String hoursWorked8Days, String hoursAvailTomorrow,
                String hoursWorked14Days, String hoursWorkedCycle, int cycle) {
            this.recapType = recapType;
            this.ruleSetType = ruleSetType;
            this.day = day;
            this.hoursWorkedToday = hoursWorkedToday;
            this.hoursAvailToday = hoursAvailToday;
            this.hoursWorked7Days = hoursWorked7Days;
            this.hoursWorked8Days = hoursWorked8Days;
            this.hoursAvailTomorrow = hoursAvailTomorrow;
            this.hoursWorked14Days = hoursWorked14Days;
            this.hoursWorkedCycle = hoursWorkedCycle;
            this.cycle = cycle;
        }

        public void dump() {
            
            if (recapType == RecapType.US) {
                System.out.println("        new ExpectedRecap(RecapType.US," + 
                        "RuleSetType."+ruleSetType.getName()+"," +
                        day + "," +
                        "\"" + hoursWorkedToday + "\"," +
                        "\"" + hoursAvailToday + "\"," +
                        "\"" + hoursWorked7Days + "\"," +
                        "\"" + hoursWorked8Days + "\"," +
                        "\"" + hoursAvailTomorrow + "\"," +
                        "\"\"," +
                        "\"\"," +
                        "0),");
            }
            else if (recapType ==  RecapType.CANADA) {
              System.out.println("        new ExpectedRecap(RecapType.CANADA," + 
                      "RuleSetType."+ruleSetType.getName()+"," +
                      day + "," +
                      "\"" + hoursWorkedToday + "\"," +
                      "\"" + hoursAvailToday + "\"," +
                      "\"" + hoursWorked7Days + "\"," +
                      "\"" + hoursWorked8Days + "\"," +
                      "\"" + hoursAvailTomorrow + "\"," +
                      "\"" + hoursWorked14Days + "\"," +
                      "\"\"," +
                      "0),");
            }
            else if (recapType == RecapType.CANADA_2007) {
              System.out.println("        new ExpectedRecap(RecapType.CANADA_2007," + 
                      "RuleSetType."+ruleSetType.getName()+"," +
                      day + "," +
                      "\"" + hoursWorkedToday + "\"," +
                      "\"" + hoursAvailToday + "\"," +
                      "\"\"," +
                      "\"\"," +
                      "\"" + hoursAvailTomorrow + "\"," +
                      "\"\"," +
                      "\"" + hoursWorkedCycle + "\"," +
                      cycle+"),");
            }
            
        }
    }
}
