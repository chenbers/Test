package com.inthinc.pro.reports.hos;

import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Interval;
import org.joda.time.PeriodType;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Ignore;
import org.junit.Test;

import com.inthinc.hos.model.HOSOrigin;
import com.inthinc.hos.model.HOSRecAdjusted;
import com.inthinc.hos.model.HOSStatus;
import com.inthinc.hos.model.RuleSetType;
import com.inthinc.pro.dao.mock.data.MockStates;
import com.inthinc.pro.model.Account;
import com.inthinc.pro.model.Address;
import com.inthinc.pro.model.Driver;
import com.inthinc.pro.model.Group;
import com.inthinc.pro.model.Person;
import com.inthinc.pro.model.hos.HOSOccupantLog;
import com.inthinc.pro.model.hos.HOSRecord;
import com.inthinc.pro.model.hos.HOSVehicleDayData;
import com.inthinc.pro.reports.FormatType;
import com.inthinc.pro.reports.Report;
import com.inthinc.pro.reports.ReportCreator;
import com.inthinc.pro.reports.ReportCriteria;
import com.inthinc.pro.reports.hos.model.HosDailyDriverLog;
import com.inthinc.pro.reports.jasper.JasperReport;
import com.inthinc.pro.reports.jasper.JasperReportCreator;

public class HosDriverDailyLogReportCriteriaTest {

    // these csv files were generated by connecting to the gain db and running the stored proc 
    //   hos_fetchLogsForDriver driverID, startDate, endDate 
    // for example:
    //   hos_fetchLogsForDriver '945463F0-44A8-4B85-9BA3-2EDAD2A9B501', '03/08/2010', '03/31/2010'
    // start date should be 20 days prior to the date you want to run the ddl report for
    // the results should be exported to csv and named test#_ddlStartDate_ddlEndDate_rule<type>
    // the csv file should be copied to test/resources/ddl and added to the list below
    // to compare run the same report for the same driver/date range in gain and copy the resulting pdf
    // to test/resources/ddl/test#Expected.pdf  -- recap, graphs, and remarks should be the same
    public static final String testCaseName[] = {
        "test0_03302010_04012010_rule2",
        "test1_01242010_01312010_rule2",
        "test2_03012010_03052010_rule2",
        "test3_06202010_06302010_rule13",
        "test4_06202010_06302010_rule7",
        "test5_06202010_06302010_rule1",
        "test6_04182010_04202010_rule10",
        "test7_06202010_06302010_rule14",
        "test8_06202010_06302010_rule6",
        "test9_06202010_06302010_rule8",
        "test10_06052010_06152010_rule9",
        "test11_01192010_01212010_rule11",
        "test12_07132010_07172010_personalTime",
        "test13_06062010_06102010_travelTimeOccupant"
    };
    
    public static final int testDay[] = {
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    };
    
    

    @Test
    public void gainTestCases() {

        for (int i = 0; i < testCaseName.length; i++) {
            DDLTestData ddlTestData = new DDLTestData(testCaseName[i]);
            HosDailyDriverLogReportCriteria hosDailyDriverLogReportCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
            hosDailyDriverLogReportCriteria.initCriteriaList(ddlTestData.interval, ddlTestData.hosRecordList, ddlTestData.hosVehicleDayDataList,
                ddlTestData.hosOccupantLogList, ddlTestData.driver, ddlTestData.account, ddlTestData.group);
            
            // check the data
            List<ReportCriteria> criteriaList = hosDailyDriverLogReportCriteria.getCriteriaList();
            assertEquals("expected one ReportCriteria item for each day", ddlTestData.numDays, criteriaList.size());
            
            int dayIdx = testDay[i];
            HosDailyDriverLog hosDailyDriverLog = (HosDailyDriverLog)criteriaList.get(dayIdx).getMainDataset().get(0);
            List<HOSRecAdjusted> correctedList =  hosDailyDriverLog.getCorrectedGraphList();
            for (HOSRecAdjusted rec : correctedList) {
                
//                public HOSRecAdjusted(String id, HOSStatus status, Date logTimeDate, TimeZone logTimeZone, Date adjustedTime, long totalAdjustedMinutes, int startIncrement, int totalIncrements, boolean edited,
//                        String serviceID, String trailerID, long totalRealMinutes, RuleSetType ruleSetType) {

//                System.out.println("new HOSRecAdjusted(" + 
//                            "\"" + rec.getId() + "\"," + 
//                        ")");
            }
            
            
            
            ReportCreator<JasperReport> reportCreator = new JasperReportCreator(null);
            Report report = reportCreator.getReport(hosDailyDriverLogReportCriteria.getCriteriaList());
    
            OutputStream out = null;
            try {
                out = new FileOutputStream("c:\\reportTest" + i + ".pdf");
                report.exportReportToStream(FormatType.PDF, out);
                out.flush();
                out.close();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }
    

    @Ignore
    @Test
    public void pdf() {
        
        // TODO: Test the date range stuff with date strings like entered from UI
        DateTimeZone dateTimeZone = DateTimeZone.getDefault();
        DateTime startDate = new DateMidnight(new DateTime().minusDays(2), dateTimeZone).toDateTime(); 
        DateTime endDate = new DateMidnight(new DateTime().plusDays(1), dateTimeZone).toDateTime(); 
System.out.println("startDate " + startDate);        
System.out.println("endDate " + endDate);

        Account account = createTestAccount();
        Group group = createTestGroup(account.getAcctID());
        Driver driver = createTestDriver(account.getAcctID());
        List<HOSRecord> testDataList = genTestData(driver.getDriverID(), startDate, endDate);
        List<HOSRecord> editedTestDataList = genEditedTestData(driver.getDriverID(), startDate, endDate);
        List<HOSVehicleDayData> hosVehicleDayData = genVehicleDayTestData(driver.getDriverID(), startDate, endDate);
        List<HOSOccupantLog> hosOccupantLogList = genOccupantLogList(driver.getDriverID(), startDate, endDate);
        Interval interval = new Interval(startDate, endDate);
        
        HosDailyDriverLogReportCriteria hosDailyDriverLogReportCriteria = new HosDailyDriverLogReportCriteria(Locale.US, Boolean.FALSE);
//        hosDailyDriverLogReportCriteria.initCriteriaList(interval, Locale.US, testDataList, hosVehicleDayData, hosOccupantLogList, driver, account, group);
        hosDailyDriverLogReportCriteria.initCriteriaList(interval, editedTestDataList, hosVehicleDayData, hosOccupantLogList, driver, account, group);
        ReportCreator<JasperReport> reportCreator = new JasperReportCreator(null);
        Report report = reportCreator.getReport(hosDailyDriverLogReportCriteria.getCriteriaList());

        OutputStream out = null;
        try {
            out = new FileOutputStream("c:\\reportTest.pdf");
            report.exportReportToStream(FormatType.PDF, out);
            out.flush();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

/*
    
        HosDailyDriverLogReportCriteria editedHosDailyDriverLogReportCriteria = new HosDailyDriverLogReportCriteria();
        editedHosDailyDriverLogReportCriteria.initCriteriaList(interval, Locale.US, editedTestDataList);
        Report editedReport = reportCreator.getReport(editedHosDailyDriverLogReportCriteria.getCriteriaList());

        out = null;
        try {
            out = new FileOutputStream("c:\\editedReportTest.pdf");
            editedReport.exportReportToStream(FormatType.PDF, out);
            out.flush();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
*/
    }




    private Group createTestGroup(Integer acctID) {
        Integer groupID = 15;
        Group group = new Group(groupID, acctID, "Fleet Group", 0);
        group.setAddress(new Address(15, "123 Group Street", "Suite 100", "Billings", MockStates.getByAbbrev("MT"), "59801", acctID));
        return group;
    }

    private Account createTestAccount() {
        Integer accountID = 1;
        Account account = new Account();
        account.setAcctID(accountID);
        account.setAcctName("Test Account");
        account.setAddress(new Address(1, "123 Street", "Suite 100", "Salt Lake City", MockStates.getByAbbrev("UT"), "84121", accountID));
        
        return account;
    }

    private Driver createTestDriver(Integer acctID) {
        Integer driverID = 10;
        Driver driver = new Driver();
        driver.setDriverID(driverID);
        driver.setDot(RuleSetType.US);
        
        Person person = new Person();
        person.setFirst("First");
        person.setLast("Last");
        driver.setPerson(person);
        
        return driver;
    }

    private List<HOSRecord> genEditedTestData(Integer driverID, DateTime startDate, DateTime endDate) {
        List<HOSRecord> hosRecordList = new ArrayList<HOSRecord>();
        
        // NON-DOT
        HOSRecord nonDOT = genHOSRecord(driverID, startDate.plusHours(20).toDate(), 160000, HOSStatus.OFF_DUTY);
        nonDOT.setDriverDotType(RuleSetType.NON_DOT);
        hosRecordList.add(nonDOT);

        hosRecordList.add(genHOSRecord(driverID, startDate.plusHours(16).toDate(), 160000, HOSStatus.OFF_DUTY));
        hosRecordList.add(genHOSRecord(driverID, startDate.plusHours(12).toDate(), 160000, HOSStatus.OFF_DUTY_OCCUPANT, true, true));
        hosRecordList.add(genHOSRecord(driverID, startDate.plusHours(8).toDate(), 160000, HOSStatus.ON_DUTY, true, false));
        hosRecordList.add(genHOSRecord(driverID, startDate.plusHours(8).toDate(), 160000, HOSStatus.HOS_DERERRAL));
        hosRecordList.add(genHOSRecord(driverID, startDate.plusHours(8).toDate(), 160000, HOSStatus.OFF_DUTY));
        HOSRecord fuelStop = genHOSRecord(driverID, startDate.plusHours(8).toDate(), 160000, HOSStatus.FUEL_STOP);
        fuelStop.setNotificationData("Vehicle Gallons: 100 Trailer Gallons: 0");
        hosRecordList.add(fuelStop);

        hosRecordList.add(genHOSRecord(driverID, startDate.toDate(), 150000, HOSStatus.DRIVING));
        
        return hosRecordList;
    }

    private List<HOSVehicleDayData> genVehicleDayTestData(Integer driverID, DateTime startDate, DateTime endDate) {
        List<HOSVehicleDayData> hosVehicleDayDataList = new ArrayList<HOSVehicleDayData>();
        for (DateTime day = startDate; day.isBefore(endDate); day = day.plusDays(1)) {

            
            HOSVehicleDayData data = new HOSVehicleDayData();
            data.setDay(day.toDate());
            data.setVehicleID(10);
            data.setVehicleName("Test Vehicle");
            data.setMilesDriven(1000l);
            data.setStartOdometer(150000l);
            
            hosVehicleDayDataList.add(data);
        }
        
        return hosVehicleDayDataList;
    }

    private List<HOSOccupantLog> genOccupantLogList(Integer driverID, DateTime startDate, DateTime endDate) {
        List<HOSOccupantLog> hosOccupantLogList = new ArrayList<HOSOccupantLog>();
        
        HOSOccupantLog hosOccupantLog = new HOSOccupantLog();
        hosOccupantLog.setDriverID(11);
        hosOccupantLog.setDriverName("Test Occupant");
        hosOccupantLog.setVehicleID(10);
        hosOccupantLog.setStatus(HOSStatus.ON_DUTY_OCCUPANT);
        hosOccupantLog.setTime(startDate.toDate());
        hosOccupantLog.setEndTime(startDate.plusHours(8).toDate());
        
        
        hosOccupantLogList.add(hosOccupantLog);
        return hosOccupantLogList;
    }
    // simulate what we would get back from getHosRecords(driverID, startDate, endDate, int hosStatus[]);
    private List<HOSRecord> genTestData(Integer driverID, DateTime startDate, DateTime endDate) {

        List<HOSRecord> hosRecordList = new ArrayList<HOSRecord>();
        hosRecordList.add(genHOSRecord(driverID, startDate.plusHours(8).toDate(), 150000, HOSStatus.OFF_DUTY));
        hosRecordList.add(genHOSRecord(driverID, startDate.toDate(), 140000, HOSStatus.DRIVING));
        
        return hosRecordList;
    }

    private HOSRecord genHOSRecord(Integer driverID, Date logTime, Number odometer, HOSStatus status)
    {
        return genHOSRecord(driverID, logTime, odometer, status, false, false);
    }
    private HOSRecord genHOSRecord(Integer driverID, Date logTime, Number odometer, HOSStatus status, boolean edited, boolean deleted)
    {
        HOSRecord hosRecord = new HOSRecord();
        hosRecord.setHosLogID(1);
        hosRecord.setDriverID(driverID);
        hosRecord.setDriverName("Test Driver");
        hosRecord.setLogTime(logTime);
        hosRecord.setTimeZone(TimeZone.getTimeZone("US/Mountain"));
        hosRecord.setVehicleID(driverID);
//        hosRecord.setDriverDotType(RuleSetType.US_OIL);
//        hosRecord.setDriverDotType(RuleSetType.CANADA_2007_CYCLE_2);
        hosRecord.setDriverDotType(RuleSetType.CANADA_2007_60_DEGREES_OIL);
//        hosRecord.setDriverDotType(RuleSetType.CANADA_60_DEGREES);
        hosRecord.setStatus(status);
        hosRecord.setEdited(edited);
        hosRecord.setDeleted(deleted);
        hosRecord.setServiceID("Test Service");
        hosRecord.setTrailerID("Test Trailer");
        hosRecord.setLocation("Salt Lake City, UT");
        hosRecord.setVehicleOdometer(odometer);
        
        return hosRecord;
    }
    
    
    class DDLTestData {
        Account account = createTestAccount();
        Group group = createTestGroup(account.getAcctID());
        Driver driver = createTestDriver(account.getAcctID());
        List<HOSRecord> hosRecordList;
        DateTime startDate; 
        DateTime endDate; 
        Interval interval;
        int numDays;
        List<HOSVehicleDayData> hosVehicleDayDataList;
        List<HOSOccupantLog> hosOccupantLogList = genOccupantLogList(driver.getDriverID(), startDate, endDate);
        
        
        public static final int statusIdx = 0;
        public static final int descriptionIdx = 1;
        public static final int tmpLocationIdx = 2;
        public static final int startOdometerIdx = 3;
        public static final int idIdx = 4;
        public static final int userIdIdx = 5;
        public static final int vehicleIdIdx = 6;
        public static final int unitIdIdx = 7;
        public static final int trailerIdIdx = 8;
        public static final int serviceIdIdx = 9;
        public static final int notificationIdIdx = 10;
        public static final int dateAddedIdx = 11;
        public static final int dateLastUpdatedIdx = 12;
        public static final int notificationTimeIdx = 13;
        public static final int localTimeIdx = 14;
        public static final int adjustedTimeIdx = 15;
        public static final int unknownIdx = 16;
        public static final int realDriverNameIdx = 17;
        public static final int originalLocationIdx = 18;
        public static final int deletedIdx = 19;
        public static final int tznameIdx = 20;
        public static final int originIdx = 21;
        public static final int editedIdx = 22;
        public static final int logTimeIdx = 23;
        public static final int ruleIdIdx = 24;
        public static final int licenseIdx = 25;
        
        //2010-01-29 17:11:08.0
        public  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        

        public DDLTestData(String baseFilename) {
            hosRecordList = readInTestDataSet("ddl/" + baseFilename + ".csv", driver);

            String values[] = baseFilename.split("_");
            DateTimeFormatter fmt = DateTimeFormat.forPattern("MMddyyyy");
            startDate = new DateMidnight(fmt.parseDateTime(values[1])).toDateTime(); 
            endDate = new DateMidnight(fmt.parseDateTime(values[2]).plusDays(1)).toDateTime(); 
            
            genVehicleDayTestData(driver.getDriverID(), startDate, endDate);
            
            interval = new Interval(startDate, endDate);
            
            numDays = interval.toPeriod().toStandardDays().getDays();
            System.out.println("numDays: " + numDays);
        }

        
        private List<HOSRecord> readInTestDataSet(String filename, Driver driver) {
            
System.out.println("filename: " + filename);            
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            
            hosVehicleDayDataList = new ArrayList<HOSVehicleDayData>();
            List<HOSRecord> hosRecordList = new ArrayList<HOSRecord>();
            int cnt = 0;
            int vehicleCnt = 0;
            BufferedReader in;
            try {
                InputStream stream = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);
                
                in = new BufferedReader(new InputStreamReader(stream));
                // skip first line of titles
                in.readLine();
                String str; 
                while ((str = in.readLine()) != null)
                {  
                    String values[] = str.split(",(?=(?:[^\"]*\"[^\"]*\")*(?![^\"]*\"))");
                    for (int i = 0; i < values.length; i++) {
                        if (values[i].startsWith("\"") && values[i].endsWith("\"")) {
                            values[i] = values[i].substring(1, values[i].length()-1);
                        }
                    }
                    HOSRecord rec = new HOSRecord();
                    rec.setDeleted(Boolean.valueOf(values[deletedIdx]));
                    rec.setDistance(0l);
                    rec.setDriverDotType(RuleSetType.valueOf(Integer.valueOf(values[ruleIdIdx])));
                    rec.setDriverID(driver.getDriverID());
                    rec.setDriverName(driver.getPerson().getFullName());
                    rec.setEdited(Boolean.valueOf(values[editedIdx]));
                    rec.setEditUserName("");
                    rec.setHosLogID(cnt++);
                    rec.setLocation(values[tmpLocationIdx]);
                    rec.setLogTime(dateFormat.parse(values[logTimeIdx]));
                    rec.setNotificationData(values[descriptionIdx]);
                    rec.setOrigin(values[originIdx] == null || values[originIdx].isEmpty() ? HOSOrigin.UNKNOWN : HOSOrigin.valueOf(Integer.valueOf(values[originIdx])));
                    rec.setOriginalLocation(values[originalLocationIdx]);
                    rec.setServiceID(values[serviceIdIdx]);
                    rec.setStatus(HOSStatus.valueOf(Integer.valueOf(values[statusIdx])));
                    rec.setTimeZone(TimeZone.getTimeZone(values[tznameIdx]));
//System.out.println("timeZone: " + rec.getTimeZone());                    
                    rec.setTrailerID(values[trailerIdIdx]);
                    rec.setVehicleName(values[vehicleIdIdx]);
                    rec.setVehicleOdometer(values[startOdometerIdx] == null || values[startOdometerIdx].isEmpty() ? null : (Long.valueOf(values[startOdometerIdx])*100l));
System.out.println("logTime: " + values[logTimeIdx] + " adjTime: " + values[adjustedTimeIdx]);                    
                    
                    
                    DateTime day = new DateMidnight(new DateTime(rec.getLogTime().getTime(), DateTimeZone.forTimeZone(rec.getTimeZone()))).toDateTime();
                    HOSVehicleDayData data = vehicleInDay(day, values[vehicleIdIdx]);
                    if (data == null) {
                        data = new HOSVehicleDayData();
                        data.setDay(day.toDate());
                        data.setVehicleID(vehicleCnt);
                        data.setVehicleName(values[vehicleIdIdx]);
                        data.setMilesDriven(1000l);
                        data.setStartOdometer(150000l);
                        
                        hosVehicleDayDataList.add(data);
                    }
                    rec.setVehicleID(vehicleCnt);
                    
                    vehicleCnt++;
                    
      
                    hosRecordList.add(rec);
                }
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ParseException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            return hosRecordList;
            
        }
        
        private HOSVehicleDayData vehicleInDay(DateTime day, String vehicleName) {
            
            for (HOSVehicleDayData hosVehicleDayData : hosVehicleDayDataList) {
                if (hosVehicleDayData.getDay().equals(day.toDate()) ||  hosVehicleDayData.getVehicleName().equals(vehicleName))
                    return hosVehicleDayData;
            }
            
            return null;
        }



        private List<HOSOccupantLog> genOccupantLogList(Integer driverID, DateTime startDate, DateTime endDate) {
            List<HOSOccupantLog> hosOccupantLogList = new ArrayList<HOSOccupantLog>();
            
//            HOSOccupantLog hosOccupantLog = new HOSOccupantLog();
//            hosOccupantLog.setDriverID(11);
//            hosOccupantLog.setDriverName("Test Occupant");
//            hosOccupantLog.setVehicleID(10);
//            hosOccupantLog.setStatus(HOSStatus.ON_DUTY_OCCUPANT);
//            hosOccupantLog.setTime(startDate.toDate());
//            hosOccupantLog.setEndTime(startDate.plusHours(8).toDate());
//            
//            
//            hosOccupantLogList.add(hosOccupantLog);
            return hosOccupantLogList;
        }
    }
}
