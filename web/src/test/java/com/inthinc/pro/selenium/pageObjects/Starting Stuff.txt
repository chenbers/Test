	
	public class ***Links extends ###Links{}
	public class ***Texts extends ###Texts{}
	public class ***TextFields extends ###TextFields{}
	public class ***Buttons extends ###Buttons{}
	public class ***DropDowns extends ###DropDowns{}
	public class ***PopUps extends MastheadPopUps{}
	
	
    public class ***Pager{
    	public Paging pageIndex(){
    		return new Paging();
    	}
    }
    
    
    public ***Pager _page(){
    	return new ***Pager();
    }
	
	public ***Links _link(){
        return new ***Links();
    }
    
    public ***Texts _text(){
        return new ***Texts();
    }
        
    public ***Buttons _button(){
        return new ***Buttons();
    }
    
    public ***TextFields _textField(){
        return new ***TextFields();
    }
    
    public ***DropDowns _dropDown(){
        return new ***DropDowns();
    }
    
    public ***PopUps _popUp(){
        return new ***PopUps();
    }
    
    
    public static void main(String[] args) {
        for (AdminOrganizationEnum method : EnumSet
                .allOf(AdminOrganizationEnum.class)) {
            System.out.println("\tpublic Text "+ captalizeEnumName(method.name())+ "(){");
            System.out.println("\t\treturn new Text(" + 
            method.getClass().getSimpleName() + "." + method.name() + ");\n\t}\n");
        }
    }
    
    
    public static void main(String[] args) {
        System.out.println("public class DriverDOTLogReportHTMLTexts {");
        for (DriverDOTLogReportHTMLEnum method : EnumSet
                .allOf(DriverDOTLogReportHTMLEnum.class)) {
            if (method.name().contains("ENTRY")){
                continue;
            }
            System.out.println("public Text "+ method.name().toLowerCase().replace("_", "") + "(Integer pageNumber){");
            System.out.println("return new Text(DriverDOTLogReportHTMLEnum." + method.name() + ", pageNumber.toString());\n}");
        }
        
        for (DriverDOTLogReportHTMLEnum method : EnumSet
                .allOf(DriverDOTLogReportHTMLEnum.class)) {
            if (!method.name().contains("ENTRY")){
                continue;
            }
            System.out.println("public TextTable "+ method.name().toLowerCase().replace("_", "") + "(Integer pageNumber, int rowNumber){");
            System.out.println("return new TextTable(DriverDOTLogReportHTMLEnum." + method.name() + ", pageNumber.toString(), 18 + 2 * rowNumber);\n}");
        }
        System.out.println("}");
    }
    
    
    
    
    
    public static void main(String[] args) {
        System.out.println("public class DriverDOTLogReportTableTexts {");
        for (DriverDOTLogReportTableEnum method : EnumSet
                .allOf(DriverDOTLogReportTableEnum.class)) {
            System.out.println("public TextTable entry"+ method.name().toLowerCase().replace("_", "") + "(){");
            System.out.println("return new TextTable(DriverDOTLogReportTableEnum." + method.name() + ");\n}");
        }
        
        System.out.println("}\npublic class DriverDOTLogReportTableLinks {");
        for (DriverDOTLogReportTableEnum method : EnumSet
                .allOf(DriverDOTLogReportTableEnum.class)) {
            System.out.println("public SortHeader sort"+ method.name().toLowerCase().replace("_", "") + "(){");
            System.out.println("return new SortHeader(DriverDOTLogReportTableEnum." + method.name() + ");\n}");
        }
        System.out.println("}");
    }
    
    
    
    public static void main(String[] args) {
        System.out.println("public class DriverDOTLogReportHTMLTexts {");
        for (DOTTimeRemainingTableEnum method : EnumSet
                .allOf(DOTTimeRemainingTableEnum.class)) {
            System.out.println("public TextTable entry"
                    + method.name().toLowerCase().replace("_", "") + "(){");
            System.out.println("return new TextTable(DOTTimeRemainingTableEnum."
                    + method.name() + ");\n}");
        }
        
        System.out.println("}\npublic class DriverDOTLogReportHTMLLinks {");

        for (DOTTimeRemainingTableEnum method : EnumSet
                .allOf(DOTTimeRemainingTableEnum.class)) {
            System.out.println("public SortHeader sort"
                    + method.name().toLowerCase().replace("_", "") + "(){");
            System.out
                    .println("return new SortHeader(DOTTimeRemainingTableEnum."
                            + method.name() + ");\n}");
        }
        System.out.println("}");
    }
    
    
    public static void main(String[] args) {
        System.out.println("public class CLASS_TO_RETURN {");
        for (ENUM_TO_USE method : EnumSet
                .allOf(ENUM_TO_USE.class)) {
            String paramaters = "Integer pageNumber";
            String additionalParams = ", pageNumber.toString()";
            if (method.name().contains("VALUE")) {
                paramaters += ", int rowNumber";
                additionalParams += ", 13 + 3 * rowNumber";
            }

            System.out.println("public CLASS_TO_RETURN "
                    + method.name().toLowerCase().replace("_", "") + "("
                    + paramaters + "){");
            System.out
                    .println("\treturn new Text(ENUM_TO_USE."
                            + method.name() + additionalParams + ");\n}");

        }
        System.out.println("}");
    }
    
    