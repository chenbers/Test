<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:security="http://www.springframework.org/schema/security" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.1.xsd">


	<security:http session-fixation-protection="newSession" entry-point-ref="casProcessingFilterEntryPoint">
		<security:intercept-url pattern="/app/admin/**" access="ROLE_ADMIN, ROLE_ADMIN_SUBSET" />
		<security:intercept-url pattern="/app/admin/hazards" access="ROLE_RHAADMIN, ROLE_HAZARDSACCESS" />		
		<security:intercept-url pattern="/app/admin/editHazard" access="ROLE_RHAADMIN, ROLE_HAZARDSACCESS" />		
		<security:intercept-url pattern="/app/hos/**" access="ROLE_HOSADMIN, ROLE_HOSACCESS" />
		<security:intercept-url pattern="/app/notifications/addCrashReport" access="ROLE_ADMIN, ROLE_CRASHREPORTACCESS" />
		<security:intercept-url pattern="/app/liveFleet" access="ROLE_ADMIN, ROLE_LIVEFLEETACCESS" />
		<security:intercept-url pattern="/app/reports/waysmartReport/**" access="ROLE_ADMIN, ROLE_WAYSMARTACCESS" />
		<security:intercept-url pattern="/secured/admin/**" access="ROLE_ADMIN, ROLE_ADMIN_SUBSET" />
		<security:intercept-url pattern="/secured/**" access="ROLE_ADMIN, ROLE_NORMAL" />
		<security:intercept-url pattern="/app/**" access="ROLE_ADMIN, ROLE_NORMAL" />
        <security:logout logout-url="/logout" logout-success-url="${cas.external.server.url}/cas/logout?service=${cas.client.url.escaped}%2Ftiwipro" />
	</security:http>

	<!-- CAS Client Configuration -->
	<bean id="serviceProperties" class="org.springframework.security.ui.cas.ServiceProperties">
		<property name="service" value="${cas.client.url}/tiwipro/j_spring_cas_security_check" />
		<property name="sendRenew" value="false" />
	</bean>

	<security:authentication-manager alias="authenticationManager"/>

	<bean id="casProcessingFilter" class="org.springframework.security.ui.cas.CasProcessingFilter">
		<security:custom-filter after="CAS_PROCESSING_FILTER" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureUrl" value="/authenticationFailure" />
		<property name="defaultTargetUrl" value="/app/dashboard" />
	</bean>

	<bean id="casProcessingFilterEntryPoint" class="org.springframework.security.ui.cas.CasProcessingFilterEntryPoint">
		<property name="loginUrl" value="${cas.external.server.url}/cas/login" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>

	<bean id="casAuthenticationProvider" class="org.springframework.security.providers.cas.CasAuthenticationProvider">
		<security:custom-authentication-provider />
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${cas.internal.server.url}/cas" />
			</bean>
		</property>
		<property name="key" value="web_auth_provider_only" />
	</bean>
    <bean id="casSingleSignOutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter">
        <security:custom-filter before="CAS_PROCESSING_FILTER"/>
    </bean>

	<!-- Overriding the default AuthenticationProcessingFilter so that we can redirect to the correct page based on the user's group level -->
	<!-- i.e. fleet, region, team, and eventually driver levels -->
<!-- 	<bean id="proFilter" class="com.inthinc.pro.security.ProAuthenticationProcessingFilter"> -->
<!-- 		<property name="authenticationManager" ref="authenticationManager" /> -->
<!-- 		<property name="authenticationFailureUrl" value="/login" /> -->
<!-- 		<property name="defaultTargetUrl" value="/app/dashboard/" /> -->
<!-- 		<property name="filterProcessesUrl" value="/security_filter" /> -->
<!-- 		<property name="alwaysUseDefaultTargetUrl" value="false" /> -->
<!-- 		<security:custom-filter position="AUTHENTICATION_PROCESSING_FILTER" /> -->

 		<!-- our additional properties -->
<!-- 		<property name="groupDAO" ref="groupDAO" /> -->
<!-- 		<property name="userDAO" ref="userDAO" /> -->
<!-- 	</bean> -->

	<!-- <bean id="authenticationProcessingFilterEntryPoint" class="com.inthinc.pro.security.ProAuthenticationProcessingFilterEntryPoint"> -->
	<!-- <property name="loginFormUrl" value="/login" /> -->
	<!-- <property name="forceHttps" value="false" /> -->
	<!-- </bean> -->
<!-- 	<bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager"> -->
<!-- 		<property name="providers"> -->
<!-- 			<list> -->
<!-- 				<ref local="daoAuthenticationProvider" /> -->
<!-- 				<ref local="anonymousAuthenticationProvider" /> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="daoAuthenticationProvider" class="org.springframework.security.providers.dao.DaoAuthenticationProvider"> -->
<!-- 		<property name="userDetailsService" ref="userDetailsService" /> -->
<!-- 		<property name="passwordEncoder"> -->
<!-- 			<ref bean="passwordEncoder" /> -->
<!-- 		</property> -->
<!-- 	</bean> -->

	<!-- not sure why this need to be here, since it seems redundant with the daoAuthenticationProvider above, but throws error without it -->
	<security:authentication-provider user-service-ref="userDetailsService">
		<security:password-encoder ref="passwordEncoder" />
	</security:authentication-provider>
	<bean id="userDetailsService" class="com.inthinc.pro.security.userdetails.ProUserServiceImpl">
		<property name="userDAO" ref="userDAO" />
		<property name="groupDAO" ref="groupDAO" />
		<property name="zoneDAO" ref="zoneDAO" />
		<property name="roleDAO" ref="roleDAO" />
		<property name="accountDAO" ref="accountDAO" />
		<property name="driverDAO" ref="driverDAO" />
	</bean>

	<!-- Password encryption -->
	<bean id="jasyptPasswordEncryptor" class="org.jasypt.util.password.StrongPasswordEncryptor" />
	<bean id="passwordEncoder" class="org.jasypt.spring.security2.PasswordEncoder">
		<property name="passwordEncryptor">
			<ref bean="jasyptPasswordEncryptor" />
		</property>
	</bean>

	<!-- Anonymous - Not sure if we need this, but leave it for now. -->
	<bean id="anonymousAuthenticationProvider" class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
		<property name="key" value="anonymous" />
	</bean>
	<bean id="anonymousProcessingFilter" class="org.springframework.security.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="anonymous" />
		<property name="userAttribute" value="anonymous,ROLE_ANONYMOUS" />
		<security:custom-filter position="ANONYMOUS_FILTER" />
	</bean>
	<bean id="authErrorBean" class="com.inthinc.pro.security.AuthErrorBean" scope="request" init-method="init">
	</bean>
</beans>