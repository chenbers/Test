<ui:composition 
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j"
	xmlns:iwi="http://pro.tiwi.com/jsf"
	xmlns:c="http://java.sun.com/jstl/core"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:t="http://myfaces.apache.org/tomahawk">
	
	<t:saveState  value="#{teamTripsBean}"/>
	<a4j:loadScript src="#{googleMapURLBean.mapUrl}&amp;hl=#{localeBean.locale.language}" />
	<script src="#{facesContext.externalContext.request.contextPath}/js/arrowedPolyline.js" type="text/javascript"></script>	
	
	<script type="text/javascript">
	//<![CDATA[
	var driverTripsArray = new Array();
	var tripsSelected = new Array();
	var overlaysArray = new Array();
	var boundsArray = new Array();
	var colorArray = new Array();
	
	var colors= ["#820f00","#ff4a12","#94b3c5","#74c6f1","#586b7a","#3e4f4f","#abc507","#eab239","#588e03",
				 "#8a8c81","#8173b1","#f99b49","#c6064f","#c4bdd9","#c8a77b"];

	function findDriver(driverID){

		for(i=0; i<driverTripsArray.length;i++){

			if(driverTripsArray[i].driverID == driverID) return i;
		}
		return -1;
	}

	function driverSelected(driverID){
		
		var i = findDriver(driverID);
		if (i > -1) return tripsSelected[i];
		return false;
	}

	function getOverlays(driverID){
		
		var i = findDriver(driverID);
		if (i > -1) return overlays[i];
		return null;
	}

	function getBounds(driverID){
		
		var i = findDriver(driverID);
		if(i >-1) return boundsArray[i];
		return null;
	}
	function removeOverlays(driverID){
		
		var i = findDriver(driverID);
		if(i < 0) return;
		
		var overlays = overlaysArray[i];

		for (var j=0; j<overlays.length; j++){
			
			map.removeOverlay(overlays[j]);
		}
	}

	function removeAllOverlays(){
		resetTrips();
		for(var i = 0; i< overlaysArray.length; i++){
			
			overlaysArray[i] = new Array();
		}
	}

	function orderOfCreation(marker,b) 
	{
	      return 1;
	}	
	
    function createMarker(point, iconImage) 
    {
    	var markerIcon;
    	var marker;
    	var baseIcon = new GIcon();
    	baseIcon.iconSize = new GSize(21, 20);
    	baseIcon.iconAnchor = new GPoint(6, 20);
    	baseIcon.infoWindowAnchor = new GPoint(5, 1);

		//Use passed in image.
    	if(iconImage != null)
    	{
			markerIcon = new GIcon(baseIcon);
       	    markerIcon.image = iconImage;
       	 	markerOptions = { icon:markerIcon,zIndexProcess:orderOfCreation  };
       	 	marker = new GMarker(point, markerOptions);
    	}
    	//Use default GoogleMap marker image.
    	else
    	{
	      	markerIcon = new GIcon();
			marker = new GMarker(point);
    	}

        bounds.extend(marker.getPoint());

    	return marker;
    }

	 function resetTrips(){
	
		 map.clearOverlays();
		 
	 }
	 function clearDownTrips(){

		resetTrips();
		driverTripsArray = new Array();
		tripsSelected = new Array();
		trips = new Array();
		boundsArray = new Array();
				 
	 }	
	 function calculateBounds(trips){

		if (trips.length == 0){

			boundsArray.push(null);
		}
		else{ 
			
			bounds = new GLatLngBounds();
			 
			for(var j=0;j<trips.length; j++){
				var tripRoute = trips[j].route;
				for(var k=0; k<tripRoute.length; k++){
					
					bounds.extend(new GLatLng(tripRoute[k].lat,tripRoute[k].lng));
				}
			}
			boundsArray.push(bounds);
		}
	 }
	 
	 function recalculateBounds(){
		 
		 var boundsPoints = new Array();
		 for(var i=0; i<boundsArray.length; i++){

			if(boundsArray[i] != null){
				 
				boundsPoints.push(boundsArray[i].getSouthWest());
				boundsPoints.push(boundsArray[i].getNorthEast());
			}
		 }
		 if (boundsPoints.length > 1){
			 var bounds = new GLatLngBounds(boundsPoints[0], boundsPoints[1]);

			 for(var i=2; i < boundsPoints.length-1;i++){

				 bounds.extend(boundsPoints[i]);
			 }
			 map.setZoom(map.getBoundsZoomLevel(bounds));
			 map.setCenter(bounds.getCenter());
		 }
	 }
	 
	 function addTrips(colorIndex, driverTrips){

		 var i = findDriver(driverTrips.driverID);
		 
		 //add data if it's not already here
		 if (i == -1) {

			 driverTripsArray.push(driverTrips);
			 tripsSelected.push(true);
			 colorArray.push(colorIndex);
			 overlaysArray.push(new Array()); //just a placeholder for now
			 calculateBounds(driverTrips.trips);
			 recalculateBounds();
		 }
		 else {

			setDriverSelected(driverTrips.driverID, true);
		 }	
		 removeAllOverlays();
		 redrawTrips();
		 
	 }
	 function unselectDriver(driverID){

		 removeOverlays(driverID);
		 setDriverSelected(driverID,false);
	 }
			 
	 function setDriverSelected(driverID, selected){
		 
		 var i = findDriver(driverID);
		 if(i > -1) tripsSelected[i] = selected;
	 }
	 function redrawTrips(){
		 
		// build the overlay arrays for everyone and add the markers to the map
		for(var i=0; i< driverTripsArray.length; i++){
			
			var overlays = overlaysArray[i];

			if(tripsSelected[i]){
				
				var driverTrips = driverTripsArray[i];
							
				for(var j=0;j<driverTrips.trips.length; j++){
					
					// BDCCArrowedPolyline(points, color, weight, opacity, opts, gapPx, headLength, headColor, headWeight, headOpacity)
					var tripRoute = driverTrips.trips[j].route;
					var latLngArray = new Array();
					for(var k=0; k<tripRoute.length; k++){
						
						latLngArray.push(new GLatLng(tripRoute[k].lat,tripRoute[k].lng));
					}
					var endlatlng = new GLatLng(driverTrips.trips[j].routeLastStep.lat, driverTrips.trips[j].routeLastStep.lng);
					latLngArray.push(endlatlng);
					
					var arrowPolyline = new BDCCArrowedPolyline(latLngArray,colors[colorArray[i]], 4, 0.9,{geodesic:true}, 
							100, 16,colors[colorArray[i]],1,0.9);
					
					map.addOverlay(arrowPolyline);
					overlays.push(arrowPolyline);
					//Start of trip marker
					startlatlng = new GLatLng(driverTrips.trips[j].beginningPoint.lat, driverTrips.trips[j].beginningPoint.lng);
					marker = createMarker(startlatlng,"#{facesContext.externalContext.request.contextPath}/images/ico_start.png");
					map.addOverlay(marker);
					overlays.push(marker);
					//End of trip marker
			
					if (driverTrips.trips[j].inProgress)
					{
						marker = createMarker(endlatlng, "#{facesContext.externalContext.request.contextPath}/images/ico_inprogress_trip.png");
					}
					else
					{
						marker = createMarker(endlatlng,"#{facesContext.externalContext.request.contextPath}/images/ico_end_trip.png");
					}
					map.addOverlay(marker);
					overlays.push(marker);
				}
			
				for(var k=0; k<driverTrips.violationEvents.length; k++){
					var violation = new GLatLng(driverTrips.violationEvents[k].latitude, driverTrips.violationEvents[k].longitude);
					var marker = createMarker(violation,"#{facesContext.externalContext.request.contextPath}/images/ico_violation.png");
					map.addOverlay(marker);
					overlays.push(marker);
				}
				for(var k=0; k<driverTrips.idleEvents.length; k++){
					var idle = new GLatLng(driverTrips.idleEvents[k].latitude,driverTrips.idleEvents[k].longitude);
					var marker = createMarker(idle, "#{facesContext.externalContext.request.contextPath}/images/ico_idle.png");
					map.addOverlay(marker);
					overlays.push(marker);
				}
				for(var k=0; k<driverTrips.tamperEvents.length; k++){
					var tamper = new GLatLng(driverTrips.tamperEvents[k].latitude,driverTrips.tamperEvents[k].longitude);
					var marker = createMarker(tamper, "#{facesContext.externalContext.request.contextPath}/images/ico_tampering.png");
					map.addOverlay(marker);
					overlays.push(marker);
				}
			}
		}
	}
	function processTrips(colorIndex, driverTrips){
		if (driverTrips.selected){
			
			addTrips(colorIndex,driverTrips);
		}
		else{
			
			unselectDriver(driverTrips.driverID);
		}
	}
//]]>
 </script>
	
    <rich:tab oncomplete="redrawTrips()">
    
	 <f:facet name="label">
	 	<h:panelGroup>
	 		<h:graphicImage value="/images/ico_map.png" /><rich:spacer width="10"/>Trips
	 	</h:panelGroup>
	 </f:facet>
   	<!-- Trips Map -->
   	<div class="section">
	       
	         <div id="driverTable" 	style="float:left; width:25%;height: 500px; border: 0;">
	        	<a4j:form id="tripsTableForm">
	        	<a4j:region id="teamTripsRegion">
	         	<rich:dataTable	value="#{teamTripsBean.drivers}" 
					       		id="driversTrips" 
					       		var="driver"
					       		rowKeyVar="index"
								styleClass="datagrid" 
								rowClasses="tableOdd,tableEven"
								rows="15"
								columnsWidth="5%,85%,10%"
								width="100%">
				<rich:column>
				<f:facet name="header">
				     <h:outputText value="#{messages.teamPage_hideShow}"/>
                </f:facet>
                <h:selectBooleanCheckbox id="select" value="#{driver.selected}">
                  <a4j:support event="onclick" data="#{driver}"
                  				oncomplete="processTrips(#{index},data)" >
                   </a4j:support>
                  				
                </h:selectBooleanCheckbox>
              </rich:column>
												
				<rich:column>
					<f:facet name="header">
						<h:outputText value="#{messages.teamPage_driverHeader}"/>
					</f:facet>
					<h:outputText value="#{driver.fullName}"/>
				</rich:column>
				<rich:column>
				<f:facet name="header">
				  <a4j:status layout="block">
                	<f:facet name="start">
                    	<h:graphicImage  value="/images/progress2.gif"/>
                	</f:facet>
            	</a4j:status>
				
				</f:facet>
				   <img src="#{teamTripsBean.icons[index].url}" alt="#{index}"/>
				</rich:column>
				</rich:dataTable>
				<rich:datascroller align="left" for="driversTrips" action="#{teamTripsBean.reset}" oncomplete="resetTrips();" 
            		 styleClass="dataScrollerSmall" renderIfSinglePage="false" id="driverTableScroller" width="98%"/>
            		 
				 </a4j:region>
 				</a4j:form>	
 				         
	         </div>  
	            
			 <div id="map-canvas" style="float:right; width: 74%; height: 500px; border: 0"></div>
			 <div style="clear:both"></div>
   	</div>
    <!-- End Trips Map -->
    </rich:tab>
    <script>
    function colorRows(){
    		jQuery('#tripsTableForm\\:driversTrips tr').click(function(){

    			if(jQuery(this).hasClass('selected-row')){
							
							jQuery(this).removeClass('selected-row');
							jQuery(this).children().removeClass('selected-row');
						}
						else {
								
							jQuery(this).addClass('selected-row');
							jQuery(this).children().addClass('selected-row');
						}
		});
    }
    </script>
</ui:composition>