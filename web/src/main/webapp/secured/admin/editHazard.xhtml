<ui:composition template="/layout/layout.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:c="http://java.sun.com/jstl/core"
	xmlns:security="http://pro.tiwi.com/jsf/security"
	xmlns:t="http://myfaces.apache.org/tomahawk">

	<ui:param name="adminSelected" value="current" />
	<ui:param name="title" value="#{messages.adminHeader_zones}" />

	<ui:define name="scripts">
		<style type="text/css">
.col1 {
	width: 95%;
}

.col2 {
	width: 5%;
	vertical-align: top;
}

.latLngText {
	color: #336699;
	background-color: transparent;
	font-family: Verdana, Arial;
	font-weight: bold;
	font-size: xx-small;
	border-style: none;
}
</style>
		<script type="text/javascript"
			src="http://maps.google.com/maps/api/js?sensor=false"></script>
		<script type="text/javascript" title="inthinc.maps">
		console.log("inthinc.maps starting");
		var inthinc = {
			maps: {
	            HazardsService: function (){
	            	this.serviceURL="www.iShouldRetrieveThisFromTheApp.com";//TODO: retrieve from app, use jsf context or bean?
	                console.log("//TODO: implement inthinc.maps.HazardService()");
	            }
			},
            nextID: 1,
            cache: {},
			HazardsService: function(){
				console.log("//TODO: implement inthincMaps.HazardService()");
			}
		};
		inthinc.maps.HazardsService.prototype.retrieveHazards = 
			function(latLngBounds){
			 console.log("retrieveHazards");
             console.log("retrieveHazards for "+latLngBounds.getNorthEast()+" , "+latLngBounds.getSouthWest());

			 var hardCodedResults = [
                                     new google.maps.LatLng(40.725015,-111.951027), 
                                     new google.maps.LatLng(40.718119,-111.904163),
                                     new google.maps.LatLng(40.747257,-111.906738)];
             return hardCodedResults;//TODO: obviously we need to replace hardcoded results with something from the database... currently I'm thinking a ajax call returning json results???
			};
		console.log("inthinc.maps done");
		</script>
		<script type="text/javascript">
			var directionsDisplay;
			var directionsService = new google.maps.DirectionsService();
			var hazardsService = new inthinc.maps.HazardsService();
			var map;
			var oldDirections = [];
			var currentDirections = null;

			function initialize() {
				var myOptions = {
					zoom : 13,
					center : new google.maps.LatLng(-33.879, 151.235),
					mapTypeId : google.maps.MapTypeId.ROADMAP
				}
				map = new google.maps.Map(
						document.getElementById("map_canvas"), myOptions);

				directionsDisplay = new google.maps.DirectionsRenderer({
					'map' : map,
					'preserveViewport' : true,
					'draggable' : true
				});
				directionsDisplay.setPanel(document
						.getElementById("directions_panel"));

				google.maps.event.addListener(directionsDisplay,
						'directions_changed', function() {
							if (currentDirections) {
								oldDirections.push(currentDirections);
								setUndoDisabled(false);
							}
							currentDirections = directionsDisplay
									.getDirections();
						});

				setUndoDisabled(true);
				//TODO: remove hard coded location strings
				var start = '950 Laird Ave, Salt Lake City, UT 84105';
                var end = '4225 Lake Park Blvd # 100, Salt Lake City, UT';
                console.log("map.bounds: "+map.getBounds());
                google.maps.event.addListener(map, 'bounds_changed', function(){console.log("bounds_changed");calcRoute(start,end)});
			}

			function calcRoute(start, end) {
				console.log("calcRoute("+start+", "+end+")");
				var request = {
					origin : start,
					destination : end,
					travelMode : google.maps.DirectionsTravelMode.DRIVING
				};
				directionsService.route(request, function(response, status) {
					if (status == google.maps.DirectionsStatus.OK) {
						directionsDisplay.setDirections(response);
					}
				});
				console.log("map: "+map);
				console.log("map.bounds: "+map.getBounds());
				console.log("map.bounds.ne: "+map.getBounds().getNorthEast());
				console.log("map.bounds.sw: "+map.getBounds().getSouthWest());
				hazardsService.retrieveHazards(map.getBounds());
			}
			
			function showHazards() {
				
			}

			function undo() {
				currentDirections = null;
				directionsDisplay.setDirections(oldDirections.pop());
				if (!oldDirections.length) {
					setUndoDisabled(true);
				}
			}

			function setUndoDisabled(value) {
				document.getElementById("undo").disabled = value;
			}
		</script>
	</ui:define>

	<ui:define name="content">
		<div style="height: 500px; width: 99%; border: 1px solid red;">
			<div id="map_canvas" style="float: left; width: 70%; height: 100%"></div>
			<rich:simpleTogglePanel id="editZoneOptions" switchType="client"
				style="float:right;" opened="true">
				<h:panelGroup layout="block" style="width:270px">
					<table width="270" border="0" cellspacing="2" cellpadding="4"
						align="left">
						<a4j:repeat value="#{zonesBean.availableZoneOptions}" var="option"
							id="zoneOptions">
							<tr>
								<td width="160" valign="center"><h:outputText
										value="#{messages[option.name]}:" /> <h:outputText value="*"
										rendered="#{option == 'SPEED_LIMIT'}" /></td>
								<td><h:selectOneMenu
										value="#{zonesBean.item.optionsMap[option]}" id="vehicleType"
										rendered="#{option.optionType eq 'VEHICLE_TYPE'}"
										style="width: 140px">
										<f:selectItems value="#{zonesBean.vehicleTypeSelectItems}" />
									</h:selectOneMenu> <rich:inputNumberSpinner
										value="#{zonesBean.item.optionsMap[option].value}" id="int"
										step="5"
										inputStyle="font: 10px Verdana,Arial,Helvetica,sans-serif;background:white;"
										minValue="0" maxValue="100" enableManualInput="true"
										rendered="#{option.optionType eq 'SPEED'}" /> <h:selectOneMenu
										value="#{zonesBean.item.optionsMap[option]}" id="onOff"
										rendered="#{option.optionType eq 'OFF_ON'}"
										style="width: 140px">
										<f:selectItems value="#{zonesBean.offOnSelectItems}" />
									</h:selectOneMenu> <h:selectOneMenu value="#{zonesBean.item.optionsMap[option]}"
										id="onOffDevice"
										rendered="#{option.optionType eq 'OFF_ON_DEVICE'}"
										style="width: 140px">
										<f:selectItems value="#{zonesBean.offOnDeviceSelectItems}" />
									</h:selectOneMenu></td>
							</tr>
							<ui:fragment rendered="#{option == 'SPEED_LIMIT'}">
								<tr>
									<td colspan="2"><h:outputText
											value="#{messages.zoneOptionSpeedLimitDesc}"
											style="color:gray;font:italic 10px Verdana,Tahoma,Arial,sans-serif;" />
									</td>
								</tr>
							</ui:fragment>
						</a4j:repeat>
					</table>
				</h:panelGroup>
			</rich:simpleTogglePanel>
		</div>
		<script type="text/javascript">
          initialize();
      </script>
	</ui:define>

</ui:composition>
