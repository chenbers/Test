<ui:composition template="/layout/layout.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:c="http://java.sun.com/jstl/core"
	xmlns:security="http://pro.tiwi.com/jsf/security"
	xmlns:t="http://myfaces.apache.org/tomahawk">

	<ui:param name="adminSelected" value="current" />
	<ui:param name="title" value="#{messages.adminHeader_zones}" />

	<ui:define name="scripts">
		<style type="text/css">
.col1 {
	width: 95%;
}

.col2 {
	width: 5%;
	vertical-align: top;
}

.latLngText {
	color: #336699;
	background-color: transparent;
	font-family: Verdana, Arial;
	font-weight: bold;
	font-size: xx-small;
	border-style: none;
}
</style>
		<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
		<script type="text/javascript" title="inthinc.maps">
		console.log("inthinc.maps starting");
		var map;
		var inthinc = {
			maps: {
	            HazardsService: function (){
	            	this.serviceURL="www.iShouldRetrieveThisFromTheApp.com";//TODO: retrieve from app, use jsf context or bean?
	                console.log("//TODO: implement inthinc.maps.HazardService()");
	            }
			},
            nextID: 1,
            cache: {},
			HazardsService: function(){
				console.log("//TODO: implement inthincMaps.HazardService()");
			}
		};
		/* CreateMarker(GLatLng, divID, image or null)
         *  
         * Creates a marker using specified image or
         * default icon if null is passed for iconImage.
         * divID is the id of a DIV you want displayed in the info window. 
         */
        function createMarker(point, divID, iconImage) {
        	console.log("createMarker("+point+", "+divID+", "+iconImage+")");
        	console.log("map.div: "+map.getDiv());
            //Use passed in image.
            if(iconImage != null){
            	console.log("new google.maps.Marker({position: point, map: map, icon: iconImage});");
                marker = new google.maps.Marker({
                	position: point, 
                	map: map,
                	icon: iconImage});
            } else {
                //Use default GoogleMap marker image.
                console.log("new google.maps.Marker({map: map, position: point });");
                marker = new google.maps.Marker({
                	map: map,
                	position: point
                });
            }
       		if(divID != null) {
       			console.log("1 ");
            	google.maps.event.addListener(marker, 'click', function() {
                    var node = document.getElementById(divID).cloneNode(true);
                    node.style.display = 'block';
                    marker.openInfoWindow(node);
                    });
       		} else {
       			console.log("2 ");
       			google.maps.event.addListener(marker, 'click', (function(marker) {
       				return function() {
       					infowindow.setContent('Hazard Details go here'); //TODO: get actual Hazard Details HERE!
       				}
       			}));
       		}
       		console.log("marker: "+marker);
            return marker;
        }
		var markers = [];
		var infowindow = new google.maps.InfoWindow();
		inthinc.maps.HazardsService.prototype.retrieveHazards = 
			function(latLngBounds){
			 console.log("retrieveHazards");
             console.log("retrieveHazards for "+latLngBounds.getNorthEast()+" , "+latLngBounds.getSouthWest());

			 var hardCodedResults = [
                                     new google.maps.LatLng(40.725015,-111.951027), 
                                     new google.maps.LatLng(40.718119,-111.904163),
                                     new google.maps.LatLng(40.747257,-111.906738)];
             return hardCodedResults;//TODO: obviously we need to replace hardcoded results with something from the database... currently I'm thinking a ajax call returning json results???
			};
		console.log("inthinc.maps done");
		</script>
		<script type="text/javascript">
			var directionsDisplay;
			var directionsService = new google.maps.DirectionsService();
			var hazardsService = new inthinc.maps.HazardsService();
			var oldDirections = [];
			var currentDirections = null;
			var bounds = new google.maps.LatLngBounds();

			function initialize() {
				console.log('this must happen before you can create markers!');
				var myOptions = {
					zoom : 3,
					center : new google.maps.LatLng(40, -111),
					mapTypeId : google.maps.MapTypeId.ROADMAP
				}
				map = new google.maps.Map(
						document.getElementById("map_canvas"), myOptions);

				directionsDisplay = new google.maps.DirectionsRenderer({
					'map' : map,
					'preserveViewport' : true,
					'draggable' : true
				});
				directionsDisplay.setPanel(document
						.getElementById("directions_panel"));

				google.maps.event.addListener(directionsDisplay,
						'directions_changed', function() {
							if (currentDirections) {
								oldDirections.push(currentDirections);
								setUndoDisabled(false);
							}
							currentDirections = directionsDisplay
									.getDirections();
						});

				setUndoDisabled(true);
                console.log("map.bounds: "+map.getBounds());
                google.maps.event.addListener(map, 'bounds_changed', function(){console.log("bounds_changed");hazardsService.retrieveHazards(map.getBounds())});
                
                
                
                
                
        		var marker;
        		<ui:repeat value="#{hazardsBean.tableData}" var="hazard">
        		marker = createMarker(  new google.maps.LatLng(#{hazard.lat}, #{hazard.lng}), 'hazard#{hazard.hazardID}', "/tiwipro/images/ico_warning.png");
        		console.log("about to add: "+marker.getPosition());
                markers.push(marker);
                console.log("added: "+marker);
                </ui:repeat>
			}
			function calcRouteNoParams(){
				console.log("calcRouteNoParams()");
				calcRoute($("origin").getValue(), $("destination").getValue());
			}
			function calcRoute(start, end) {
				console.log("calcRoute("+start+", "+end+")");
				var request = {
					origin : start,
					destination : end,
					travelMode : google.maps.DirectionsTravelMode.DRIVING
				};
				directionsService.route(request, function(response, status) {
					if (status == google.maps.DirectionsStatus.OK) {
						directionsDisplay.setDirections(response);
						var boundsCount = 0;
						directionsDisplay.getDirections().routes.forEach(function(element, index, array){
							console.log("element.bounds"+element.bounds);
							if(boundsCount == 0) {
								bounds = element.bounds;
						    } else {
								bounds.extend(element.bounds.getNorthEast());
								bounds.extend(element.bounds.getSouthWest());
							}
							map.fitBounds(bounds);
						});
						console.log(response);
						console.log(response);
						console.log(response);
					}
				});
				
				
				console.log("map: "+map);
				console.log("map.bounds: "+map.getBounds());
				console.log("map.bounds.ne: "+map.getBounds().getNorthEast());
				console.log("map.bounds.sw: "+map.getBounds().getSouthWest());
				hazardsService.retrieveHazards(map.getBounds());
			}
			
			function showHazards() {
				
			}

			function undo() {
				currentDirections = null;
				directionsDisplay.setDirections(oldDirections.pop());
				if (!oldDirections.length) {
					setUndoDisabled(true);
				}
			}

			function setUndoDisabled(value) {
				document.getElementById("undo").disabled = value;
			}
		</script>
	</ui:define>

	<ui:define name="content">
      <div style="height: 500px; width: 99%; border: 1px solid red;">
        <div id="map_canvas" style="float: left; width: 100%; height: 50%"></div>
        <div style="float: right; width: 100%; height: 50%; overflow: auto">
            <button id="undo" style="display: block; margin: auto" onclick="undo()">#{messages.hazard_undo}</button>
            <div id="to_from" style="float: left; width: 50%; border: 1px solid red;" >
            	<form action="#" onsubmit="calcRouteNoParams(); return false;">
            		<input type="text" id="origin" value="#{messages.hazard_origin}" />
            		 #{messages.hazard_to}
            		<input type="text" id="destination" value="#{messages.hazard_destination}" />
            		<input type="submit" id="submit" value="#{messages.hazard_findRoute}" />
            	</form>
            </div>
            <div id="directions_panel" style="float: left; width: 50%; border: 1px solid red;" ></div>
            <div id="hazards_panel" style="float: right; width: 50%; border: 1px solid red;"></div>
        </div>
      </div>
      <script type="text/javascript">
          initialize();
      </script>

	</ui:define>

</ui:composition>
