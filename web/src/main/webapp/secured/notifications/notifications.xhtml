<ui:composition template="/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml" xmlns:ui="http://java.sun.com/jsf/facelets" xmlns:h="http://java.sun.com/jsf/html"
    xmlns:rich="http://richfaces.org/rich" xmlns:a4j="http://richfaces.org/a4j" xmlns:f="http://java.sun.com/jsf/core" xmlns:pretty="http://ocpsoft.com/prettyfaces">

    <ui:param name="notificationsSelected" value="current" />

    <ui:define name="scripts">
		<a4j:loadScript src="#{googleMapURLBean.mapUrl}&amp;hl=#{localeBean.locale.language}" />
		<a4j:loadScript src="/js/drawZone.js" />
		<a4j:loadScript src="/js/mapGeocode.js" />
        <script type="text/javascript">
          var map;
          var geocoder = null;
          var errorMessage = null;
          
          function initializeMap(lat, lng, zonePoints, noteID) 
          {
            if (GBrowserIsCompatible()) {
              map = new GMap2(document.getElementById("address-canvas"));
              var location = new GLatLng(lat, lng)
              map.addControl(new GLargeMapControl());
              map.setCenter(location, 15);
              map.addOverlay(new GMarker(location)); 
  				errorMessage = "#{messages.sbs_badLatLng}"

              
		      var outline = fromOutlineString(zonePoints);
              if (outline)
              {
            	// Draw Zone and set center
                centerMapAtZone(getLatLngBounds(outline));
                loadZone(outline, false);
                map.addOverlay(new GMarker(getLatLngBounds(outline).getCenter()));
                showInfoBubble(noteID, getLatLngBounds(outline).getCenter());
              }
              else
              {
            	showInfoBubble(noteID, location);
              }
            }
          }

	      function showInfoBubble(divID, latLng)
	      {
	    	  var node = document.getElementById(divID).cloneNode(true);
    		  node.style.display = 'block';
       		  map.openInfoWindow(latLng, node);
		  }
          
          function initializeTable()
          {
              jQuery(".clickable-map-icon").click(function(){
                  var address = jQuery(this).siblings("[id$='addressToolTip']").find("[id$='address']").text();
                  jQuery('#mapModalHeader').text("#{messages.driver_event_location}: " + address);
                });
              jQuery('.dr-table-row:has(a[name*="excluded"]) a').css("color","#cccccc");
              jQuery('.dr-table-row:has(a[name*="excluded"]) td').css("color","#cccccc");
          }
          
         function initializeTableFilterCols()
         {
			jQuery('##{context}-form\\:#{context}\\:groupfsp').attr('size', '15');
			jQuery('##{context}-form\\:#{context}\\:driverfsp').attr('size', '15');
			jQuery('##{context}-form\\:#{context}\\:vehiclefsp').attr('size', '15');
         }

  		/* CreateMarker(GLatLng, divID, GIcon or null)
  		 *	
  		 * Creates a marker using specified GIcon or
  		 * default icon if null is passed for iconImage.
  		 * divID is the id of a DIV you want displayed in the info window. 
  		 */
          function createMarker(point, divID, iconImage) 
          {
          	var markerIcon;
          	var marker;

  			//Use passed in image.
          	if(iconImage != null)
          	{
  				markerIcon = new GIcon(baseIcon);
  	       	    markerIcon.image = iconImage;
  	       	 	markerOptions = { icon:markerIcon };
  	       	 	marker = new GMarker(point, markerOptions);
          	}
          	//Use default GoogleMap marker image.
          	else
          	{
  		      	markerIcon = new GIcon();
  				marker = new GMarker(point);
          	}
         
         		GEvent.addListener(marker, "click", function() {
  					var node = document.getElementById(divID).cloneNode(true);
            			node.style.display = 'block';
  		            marker.openInfoWindow(node);
  		 			});

          	return marker;
          }
        </script>
          <rich:panel id="script">
          <script type="text/javascript">
          
  		 function getLink(index){
			 
      		var link = document.getElementById("link_"+index);
      		var linkText = document.getElementById("#{context}-form:#{context}:"+index+":linkText").value;
      		if (link.href.length==0){
	      		
				link.href = linkText;
			}
		 }
 		 function getAddress(index){
			 
	      		var address = document.getElementById("#{context}-form:#{context}:"+index+":eventAddress");
   				var lat = document.getElementById("#{context}-form:#{context}:"+index+":eventLat");
   				var lng = document.getElementById("#{context}-form:#{context}:"+index+":eventLng");
	      		
	      		if (address.innerHTML.length==0){
		      		
					if( lat.value &gt;= -90 &amp;&amp; lat.value &lt;= 90 &amp;&amp;  lng.value &gt;= -180 &amp;&amp;  lng.value &lt;= 180){
						reverseGeocodeTripAddress(new GLatLng(lat.value,lng.value),address,index);
					}
					else {						
						lkFrZn(lat.value,lng.value,index);
					}
								
	      		}
			 
		 }
       

          function reverseGeocodeTripAddress(latlng, addressElement, index){
       	   
       		new GClientGeocoder().getLocations(latlng, 
          			function(response){
      			        if (!response || response.Status.code != 200) {
      			        	lkFrZn(latlng.lat(),latlng.lng(),index);	  
      			        } 
      			        else {
   			             	addressElement.innerHTML = response.Placemark[0].address;
      			        }
      		    	});
          }
          
          function checkForZoneName(zoneName) {              
              var nameAndIndex = zoneName.split(",");
              var name = nameAndIndex[0];
              var indx = nameAndIndex[1];
              
        	  var addressEl = document.getElementById("#{context}-form:#{context}:"+indx+":eventAddress");                        
 			  addressEl.innerHTML = name;
          }
          
      		</script>
          </rich:panel>
    </ui:define>

    <ui:define name="subnavigation">
        <div class="sub_nav">
            <div class="sub_nav-bg">
                <ul>
                    <li id="redflagtab" class="#{customSubSelected}">
                        <pretty:link id="#{context}-redFlags" mappingId="redFlags"><span>#{messages.notes_tab_redflag}</span></pretty:link>
                    </li>
                    <li id="safetytab" class="#{safetySubSelected}">
                        <pretty:link id="#{context}-safety" mappingId="safety"><span>#{messages.notes_tab_safety}</span></pretty:link>
                    </li>
                    <li id="diagnosticstab" class="#{diagnosticsSubSelected}">
                        <pretty:link id="#{context}-diagnostics" mappingId="diagnostics"><span>#{messages.notes_tab_diagnostics}</span></pretty:link>
                    </li>
                    <li id="emergencytab" class="#{emergencySubSelected}">
                        <pretty:link id="#{context}-emergency" mappingId="emergency"><span>#{messages.notes_tab_emergency}</span></pretty:link>
                    </li>
                    <li id="crashhistorytab" class="#{crashhistorySubSelected}">
                        <pretty:link id="#{context}-crashHistory" mappingId="crashHistory"><span>#{messages.notes_tab_crashhistory}</span></pretty:link>
                    </li>                    
                </ul>
            </div>
        </div>
    </ui:define>
</ui:composition>