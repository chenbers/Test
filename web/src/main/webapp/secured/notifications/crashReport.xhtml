<ui:composition template="/layout/layout.xhtml" 
				xmlns="http://www.w3.org/1999/xhtml" 
				xmlns:ui="http://java.sun.com/jsf/facelets"
  				xmlns:h="http://java.sun.com/jsf/html" 
  				xmlns:rich="http://richfaces.org/rich"
  				xmlns:a4j="http://richfaces.org/a4j"
				xmlns:tiwi="http://pro.tiwi.com/jsf"
  				xmlns:f="http://java.sun.com/jsf/core"
                xmlns:c="http://java.sun.com/jstl/core"
	            xmlns:t="http://myfaces.apache.org/tomahawk"
                xmlns:pretty="http://ocpsoft.com/prettyfaces"                
      			xmlns:fn="http://java.sun.com/jsp/jstl/functions" 
                xmlns:security="http://pro.tiwi.com/jsf/security">
                
    <ui:define name="scripts">
        <script src="http://maps.google.com/maps?file=api&amp;v=#{gmBean.version}&amp;key=#{gmBean.key}&amp;hl=#{localeBean.locale.language}" type="text/javascript"></script>
		
		<tiwi:conditionalCSS browserVersion="IE"><script language="javascript" type="text/javascript" src="#{request.contextPath}/js/crshdetl.excanvas.min.js"></script></tiwi:conditionalCSS>
	    <script language="javascript" type="text/javascript" src="#{request.contextPath}/js/crshdetl.jquery.flot.js"></script>
    	<script language="javascript" type="text/javascript" src="#{request.contextPath}/js/jquery.flot.crosshair.js"></script>
    
    		<style>
			.section {
				width: 460px;
				vertical-align: top;
				text-align: left;
				padding: 5px;
			}
			
			.section_title {
				font: bold 10px Verdana, Arial, Helvetica, sans-serif;
				border-bottom: 1px solid #333;
				padding: 10px 5px 5px;
				margin-bottom:10px;
				margin-top:10px;
				text-align: left;
			}
			.col1 {
				padding-right: 30px;
			}
			.col2{
			}
			
			.datagrid th {			
				background: #BFD292;
				padding: 0;
				text-align: center;
			}
			.datagrid > tbody > tr > td {
				text-align: center;
			}
			.legendLabel {
				width: 100px;
			}
			.crash_panel_content {
				height: 410px;
			}
			
		</style>
	    <script language="javascript" type="text/javascript">
	     	var baseIcon = new GIcon();
				baseIcon.iconSize = new GSize(20, 20);
				baseIcon.iconAnchor = new GPoint(5, 13);
				baseIcon.infoWindowAnchor = new GPoint(5, 1);

			var map, vehicleMarker, plot, gpsSpeed = [], obdSpeed = [], rpm = [], crashPoints = [], tripPoints = [], tripSpeed = [], crashPolyline, tripPolyline;
			var crashPoint = {latlng: new GLatLng(#{crashReportBean.crashReport.lat}, #{crashReportBean.crashReport.lng}), time: #{crashReportBean.crashReport.date.time}};
			
			/* TODO: Retrieve data via JSON */
	    	<a4j:repeat value="#{crashReportBean.crashReport.crashDataPoints}" var="point">
	    		gpsSpeed.push([#{point.time.time}, #{point.gpsSpeed}, new GLatLng(#{point.lat}, #{point.lng})]);
	    		obdSpeed.push([#{point.time.time}, #{point.obdSpeed}, new GLatLng(#{point.lat}, #{point.lng})]);
	    		rpm.push([#{point.time.time}, #{point.rpm}, new GLatLng(#{point.lat}, #{point.lng})]);
				crashPoints.push(new GLatLng(#{point.lat}, #{point.lng}));
	    	</a4j:repeat>    	
		
	    	<a4j:repeat value="#{crashReportBean.crashReportTrip.route}" var="route">
				tripPoints.push(new GLatLng(#{route.lat}, #{route.lng}));
    		</a4j:repeat>
			
			function initMap() {
				
				if (GBrowserIsCompatible()) {					
					GUnload();
					//var point = new GLatLng(#{crashReportBean.crashReport.lat},#{crashReportBean.crashReport.lng})
					map = new GMap2(document.getElementById("map-canvas"));						
					map.addControl(new GLargeMapControl());
					map.addControl(new GMapTypeControl());
					map.addControl(new GOverviewMapControl()); 
					map.setMapType(G_NORMAL_MAP);
					map.setCenter(crashPoint.latlng, 14);
					
					var vehicleIcon = new GIcon(baseIcon);
					vehicleIcon.image = "#{request.contextPath}/images/ico_vehicle.png";
					markerOptions = { icon:vehicleIcon };					 					 
					vehicleMarker = new GMarker(crashPoint.latlng, markerOptions);
					map.addOverlay(vehicleMarker);
				
					var crashIcon = new GIcon(baseIcon);
					crashIcon.iconSize = new GSize(25, 20);
					crashIcon.image = "#{request.contextPath}/images/ico_vehicle_crash.png";
					map.addOverlay(new GMarker(crashPoint.latlng, { icon: crashIcon }));
					
					//Start of trip marker					
					<ui:fragment rendered="#{crashReportBean.crashReportTrip.route ne null}">
						startlatlng = new GLatLng(#{crashReportBean.crashReportTrip.route[0].lat}, #{crashReportBean.crashReportTrip.route[0].lng});
						marker = createMarker(startlatlng, "#{trip.trip.startTime}_START", "#{request.contextPath}/images/ico_start.png");
						map.addOverlay(marker);					
					
					//End of trip marker
						endlatlng = new GLatLng(#{crashReportBean.crashReportTrip.route[fn:length(crashReportBean.crashReportTrip.route) - 1].lat}, #{crashReportBean.crashReportTrip.route[fn:length(crashReportBean.crashReportTrip.route) - 1].lng});
						marker = createMarker(endlatlng, "#{trip.trip.endTime}_END", "#{request.contextPath}/images/ico_end_trip.png");
						map.addOverlay(marker);
					
						tripPolyline = new GPolyline(tripPoints, "#0000ff", 6, 1);
						map.addOverlay(tripPolyline);
						//Set here, just in case there are not crashdatapoints
						var bounds = tripPolyline.getBounds();
   						map.setCenter(bounds.getCenter(),map.getBoundsZoomLevel(bounds));   											
					</ui:fragment>
					
					<ui:fragment rendered="#{crashReportBean.crashReport.crashDataPoints ne null}">
						crashPolyline = new GPolyline(crashPoints, "#CB4B4B", 6, 1);
						map.addOverlay(crashPolyline);

						var bounds = crashPolyline.getBounds();
   						map.setCenter(bounds.getCenter(),map.getBoundsZoomLevel(bounds));   					

						GEvent.addListener(map, 'mousemove', function(point) {
							var closestPoint = getClosestPointFromList(point, crashPoints);			
							vehicleMarker.setLatLng(closestPoint.latlng);
							plot.setCrosshair({ x: gpsSpeed[closestPoint.index][0], y:gpsSpeed[closestPoint.index][1]});
			            	jQuery("#legend .legendLabel").each(
				            	function(i){
				            		jQuery(this).text(jQuery(this).text().replace(/=.*/, "= " + plot.getData()[i].data[closestPoint.index][1]));				
							});
						}); // for detecting if mouse is above displayed route
					</ui:fragment>
				}
                      
             }           

	        /*<![CDATA[*/    
	        function getClosestPointFromList(latLng,latLngArray){
	        	if(latLng){
	                var closestLatLng, difference, returnIndex; 
	                for (i = 0; i < latLngArray.length; i++){
						var latDifference = Math.abs(latLng.lat() - latLngArray[i].lat());
						var lngDifference = Math.abs(latLng.lng() - latLngArray[i].lng());
						var tempDifference = latDifference + lngDifference;
						
						if(difference == null || tempDifference <= difference){
								closestLatLng = latLngArray[i];
								difference = tempDifference;
								returnIndex = i;
						}
	                }
	                if(closestLatLng) {
	                    return {index: returnIndex, latlng: closestLatLng};
	                }
	        	}
	            return  {index: 0, latlng: latLngArray[latLngArray.length - 1]};
	        }

			function printObject(obj, element, deep) {
	            jQuery.each(obj, function(name, value) {
		        	jQuery(element).append("<p style='padding-left: " + deep + "px'>" + name + ": " + value + " </p> ");
		        	if(deep < 100 && name != 'data' && null != value && typeof(value) == 'object') {
						printObject(value, element, deep + 10);
		        	}
	            });
			}
			/*]]>*/
            

		    function orderOfCreation(marker,b) 
		    {
		          return 1;
		    }	

			function createMarker(point, divID, iconImage) 
	        {
	        	var markerIcon;
	        	var marker;

				//Use passed in image.
	        	if(iconImage != null)
	        	{
					markerIcon = new GIcon(baseIcon);
		       	    markerIcon.image = iconImage;
		       	 	markerOptions = { icon:markerIcon,zIndexProcess:orderOfCreation };
		       	 	marker = new GMarker(point, markerOptions);
	        	}
	        	//Use default GoogleMap marker image.
	        	else
	        	{
			      	markerIcon = new GIcon();
					marker = new GMarker(point);
	        	}
	       
	       		GEvent.addListener(marker, "click", function() {
						var node = document.getElementById(divID).cloneNode(true);
	          			node.style.display = 'block';
			            marker.openInfoWindow(node);
			 			});

	        	return marker;
	        }

	        function formatDate(date) {
		        var hour = date.getHours();
		        var min = date.getMinutes();
		        var timePeriod = "#{messages.time_period_am}";
		        if(hour > 12) {
			        hour = hour - 12;
			        timePeriod = "#{messages.time_period_pm}";
		        }
		        if(10 > min) {
			        min = "0" + min;
		        }
		        return hour + ":" + min + ":" + date.getSeconds() + " " + timePeriod;
	        }

			function bodyLoad() {
				initMap();
			}
			function bodyUnload() {
				GUnload();
			}	
		</script>

	</ui:define>
	<ui:define name="content">

		
		<t:saveState value="#{crashReportBean}"/>
		<ui:include src="/includes/tripBubble.xhtml">
			<ui:param name="hiddenDivID" value="#{trip.trip.startTime}_START" />
			<ui:param name="bubbleTitle" value="#{messages.TRIP_START}" />
			<ui:param name="timeZoneObject" value="#{driverTripsBean.timeZone}" />
			<ui:param name="eventDateTime" value="#{trip.trip.startTime}" />
			<ui:param name="eventLocation" value="#{trip.startAddress}" />
			<ui:param name="datePattern" value="#{messages.dateTimeFormat}" />
		</ui:include>
		<ui:include src="/includes/tripBubble.xhtml">
			<ui:param name="hiddenDivID" value="#{trip.trip.endTime}_END" />
			<ui:param name="bubbleTitle" value="#{messages.TRIP_END}" />
			<ui:param name="eventDateTime" value="#{trip.trip.endTime}" />
			<ui:param name="eventLocation" value="#{trip.endAddress}" />
			<ui:param name="timeZoneObject" value="#{driverTripsBean.timeZone}" />
			<ui:param name="datePattern" value="#{messages.dateTimeFormat}" />
		</ui:include>


		<div style="width: 940px; margin:auto">
			<div class="panel_nw">
				<div class="panel_title">
					#{messages.crashReport}
				</div>
			</div>
			<div class="panel_w">
				<div class="panel_content">
					<h:form>
						<ul id="grid_nav" style="margin: 0;">
							 <li class="l text"><a4j:htmlCommandLink action="pretty:crashHistory" value="#{messages.crashReport_backToCrashHistory}" /></li>
		                   	 <security:authorize ifAnyGranted="ROLE_CUSTOMUSER,ROLE_SUPERUSER,ROLE_INTHINC">
			                   	 <li class="r">
			                      	<h:outputText value=" " />
			                      
			                      	<pretty:urlbuffer var="editCrashLink" mappingId="editCrashReport">
			                      		<f:param value="#{crashReportBean.crashReport.crashReportID}"/>
			                      	</pretty:urlbuffer>
			                      	
			                      	<button type="button" class="left" onclick="location.href = '#{requestScope.editCrashLink}';">
			                      		<span class="edit">
			                      	 		<h:outputText value="#{messages.button_edit}" />
			                      	 	</span>
			                      	</button>	
			                      			                      	 
			                   	 </li>
		                   	 </security:authorize>
		                </ul>
	                </h:form>

					<h:panelGrid columns="2" columnClasses="section">
						<h:panelGroup>							
							<div class="panel_nw">    						        
	            				<div class="panel_title" style="z-index: #{zorder}">
	            					#{messages.crashReport_crashDetails}
	            				</div>		
	            			</div>		
	            		
					        <div class="panel_w">
					            <div class="panel_content crash_panel_content">
									<h:panelGrid columns="2" columnClasses="col1,col2" cellspacing="2px" cellpadding="4px">								
										<h:outputText value="#{messages.crashReport_status}:" />
										<h:outputText value="#{messages[crashReportBean.crashReport.crashReportStatus]}"/>								
										
										<h:outputText value="#{messages.crashReport_date}:" />
										<h:outputText value="#{crashReportBean.crashReport.date}" style="font-weight: bold;">	
											<f:convertDateTime pattern="#{messages.dateTimeFormat}" timeZone="#{crashReportBean.person.timeZone}" />
										</h:outputText>								
										
							            <h:outputText value="#{messages.crashReport_vehicle}:" />
						                <pretty:link mappingId="vehiclePerformance" rendered="#{crashReportBean.crashReport.vehicleID != null}">
						                    <f:param value="#{crashReportBean.crashReport.vehicleID}"/>
										<h:outputText value="#{crashReportBean.crashReport.vehicle.name}"/>	
						                </pretty:link>								
										
			                            <h:outputText value="#{messages.crashReport_driver}:" />
			                                      
						                <pretty:link mappingId="driverPerformance" rendered="#{crashReportBean.crashReport.driver.person.fullName != 'Unknown Driver'}">
						                    <f:param value="#{crashReportBean.crashReport.driverID}"/>
											<h:outputText value="#{crashReportBean.crashReport.driver.person.fullName}"/>	
						                </pretty:link>
						                <h:outputText rendered="#{crashReportBean.crashReport.driver.person.fullName == 'Unknown Driver'}" 
						                	value="#{crashReportBean.crashReport.driver.person.fullName}"/>
										
										<h:outputText value="#{messages.crashReport_weather}:" />	
										<h:outputText value="#{crashReportBean.crashReport.weather}"/>									
										
										<h:outputText value="#{messages.crashReport_occupantCount}:" />
										<h:outputText value="#{crashReportBean.crashReport.occupantCount}"/>	
										
										<h:outputText value="#{messages.crashReport_description}:" />
										<h:outputText value="#{crashReportBean.crashReport.description}"/>							
									</h:panelGrid>	
								</div>
							</div>
							
					        <div class="panel_sw">
					            <div class="panel_statusbar"/>
					        </div>
						</h:panelGroup>

					
						<h:panelGroup>
							<div class="panel_nw">    						        
	            				<div class="panel_title" style="z-index: #{zorder}">
	            					#{messages.crashReport_crashRoute}
	            				</div>		
	            			</div>		
	            		
					        <div class="panel_w">
					            <div class="panel_content crash_panel_content">
									<div id="map-canvas" style="width: 100%; height: 375px; border: 0"></div>
								</div>
							</div>			
							
					        <div class="panel_sw">
					            <div class="panel_statusbar"/>
					        </div>											    
						</h:panelGroup>
						<h:panelGroup>					        
							<div class="panel_nw">    						        
	            				<div class="panel_title" style="z-index: #{zorder}">
	            					#{messages.crashReport_crashEvents}
	            				</div>		
	            			</div>		
	            		
					        <div class="panel_w">
					            <div class="panel_content crash_panel_content">
									<h:form>
										<rich:dataTable id="crashPointTable" value="#{crashReportBean.crashReport.crashDataPoints}" 
											var="dataPoint" styleClass="datagrid" rowClasses="tableOdd,tableEven" rows="10" cellspacing="1" 
											width="100%">
										<f:facet name="header">
											<rich:columnGroup>
												<rich:column rowspan="2">#{messages.crashReport_time}</rich:column>
												<rich:column rowspan="2">#{messages.crashReport_rpm}</rich:column>
												<rich:column colspan="2">#{messages.crashReport_speed}</rich:column>
												<rich:column colspan="2">#{messages.crashReport_seatBelt}</rich:column>
												<rich:column breakBefore="true">#{messages.crashReport_obd}</rich:column>
												<rich:column>#{messages.crashReport_gps}</rich:column>
												<rich:column>#{messages.crashReport_available}</rich:column>
												<rich:column>#{messages.crashReport_state}</rich:column>
											</rich:columnGroup>
										</f:facet>
											<rich:column>
												<h:outputText value="#{dataPoint.time}">
													<f:convertDateTime pattern="#{messages.longTimeFormat}" timeZone="#{crashReportBean.person.timeZone}" />
												</h:outputText>
											</rich:column>
											<rich:column>
												#{dataPoint.rpm}
											</rich:column>
											<rich:column>
												<h:outputText value="#{dataPoint.obdSpeed}" converter="MphToKphConverter" />#{' '}<h:outputText value="mph" converter="MeasurementTextConverter" />		
											</rich:column>
											<rich:column>
												<h:outputText value="#{dataPoint.gpsSpeed}" converter="MphToKphConverter" />#{' '}<h:outputText value="mph" converter="MeasurementTextConverter" />									
											</rich:column>
											<rich:column>
												<h:graphicImage value="#{dataPoint.seatBeltAvailable == true ? '/images/icon_checkmark.png' : '/images/ico_x.png'}" /> 
											</rich:column>
											<rich:column>
												<h:graphicImage value="#{dataPoint.seatBeltState == true ? '/images/icon_checkmark.png' : '/images/ico_x.png'}" rendered="#{dataPoint.seatBeltAvailable == true}" /> 
											</rich:column>
										</rich:dataTable>	
									    <rich:datascroller for="crashPointTable" styleClass="dataScroller" reRender="crashPointTable"/>
								    </h:form>
								</div>
						    </div>
							
					        <div class="panel_sw">
					            <div class="panel_statusbar"/>
					        </div>
						</h:panelGroup>
						<h:panelGroup>	
					        <div class="panel_nw">    						        
	            				<div class="panel_title" style="z-index: #{zorder}">
	            				</div>		
	            			</div>		
	            		
					        <div class="panel_w">
					            <div class="panel_content crash_panel_content">		       
					            	<div id="legend"/>		            
							    	<div id="placeholder" style="width: 475px; height: 350px;"></div>
							    </div>
						    </div>
							
					        <div class="panel_sw">
					            <div class="panel_statusbar"/>
					        </div>
						</h:panelGroup>
					</h:panelGrid>
					
				    <p> <span id="eventinfo"></span></p>
				    <p> <span id="iteminfo"></span></p>
				    <p> <span id="posinfo"></span></p>
				    <p> <span id="datainfo"></span></p>


				</div>
			</div>
			<div class="panel_sw">
				<div class="panel_statusbar"></div>
			</div>
		</div>
        
		<script language="javascript" type="text/javascript">
			/*<![CDATA[*/
			jQuery(function () {					
			    plot = jQuery.plot(jQuery("#placeholder"),
			           [  {data: obdSpeed, label: "#{messages.crashReport_obdSpeed} = 0", color: "#0000FF"}, 
				          {data: gpsSpeed, label: "#{messages.crashReport_gpsSpeed} = 0", color: "#00FF00"}, 
				          {data: rpm, label: "#{messages.crashReport_rpm} = 0", color: "#FF9900", yaxis: 2}],
			           { xaxis: {  tickFormatter: function (time, axis) {
							        return formatDate(new Date(time));
							      } },
		            	 y2axis: { tickFormatter: function (v, axis) { return v.toFixed(0) }},
		                 series: {
		                     lines: { show: true },
		                     points: { show: false }
		                 },
                         crosshair: { mode: "x", color: "#999999" },
			             grid: { 
    			             hoverable: true, 
    			             autoHighlight: false,
    			             markings: [{xaxis: {from: crashPoint.time, to: crashPoint.time}, color: "#CB4B4B"}]
    			         },
			             legend: { 
				             		noColumns: 12, 
				             		container: "#legend"
		            	  }
			           });		

			    var o;

			    o = plot.pointOffset({ x: crashPoint.time, y: 30});
			    // we just append it to the placeholder which Flot already uses
			    // for positioning
			    //jQuery("#placeholder").append('<div style="position:absolute;left:' + (o.left + 4) + 'px;top:' + o.top + 'px;color:#000000;font-size:smaller; background-color: #BFD292;">Crash</div>');
		        
		         
			    jQuery("#placeholder").bind("plothover", function (event, pos, item) {	
				   	//printObject(plot.getData(),"#iteminfo" ,0);
		   	        var axes = plot.getAxes();
			        if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max ||
			            pos.y < axes.yaxis.min || pos.y > axes.yaxis.max)
			            return;
			
			        var i, dataIndex, dataset = plot.getData();
			        for (i = 0; i < dataset.length; ++i) {
			            var series = dataset[i];
			
			            // find the nearest points, x-wise
			            for (dataIndex = 0; dataIndex < series.data.length; ++dataIndex)
			                if (series.data[dataIndex][0] > pos.x)
			                    break;		
			        }

		            jQuery("#legend .legendLabel").each(
			            function(series){
				            if( series < 3) {
			            		jQuery(this).text(jQuery(this).text().replace(/=.*/, "= " + plot.getData()[series].data[dataIndex][1]));	
				            }			
					});
		            vehicleMarker.setLatLng(crashPoints[dataIndex])
			    });

				jQuery("#legend > table > tbody > tr").append("<td class='legendColorBox'><div style='border: 1px solid #CCCCCC; padding: 1px;'><div style='border: 5px solid #CB4B4B; overflow: hidden; width: 4px; height: 0pt;'/></div></td><td style='width: 100px'>#{messages.crashReport_crashPoint}</td>");
	            /*]]>*/
			});
		</script>

		
	</ui:define>
</ui:composition>