<beans xmlns="http://www.springframework.org/schema/beans"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-2.5.xsd"
	default-autowire="byName">


	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:tiwipro.properties</value>
				<value>file:${CATALINA_HOME}/conf/tiwipro.properties</value>
			</list>
		</property>
	</bean>

	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="host" value="${mailserver}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.debug">${mail.debug}</prop>
			</props>
		</property>
	</bean>

	<bean id="mailDispatcher" class="com.inthinc.pro.scheduler.dispatch.MailDispatcher">
		<property name="mailSender" ref="mailSender" />
		<property name="from">
			<value><![CDATA[DriveAware Support <${accountOptions.noReplyEmailAddress}>]]></value>
		</property>
	</bean>

	<bean id="phoneDispatcher" class="com.inthinc.pro.scheduler.dispatch.PhoneDispatcher"
		init-method="init">
		<!-- <property name="phoneServerURL" value="${voxeo.phoneServerURL}" /> -->
		<!-- <property name="callerID" value="${voxeo.callerID}" /> -->
		<!-- <property name="tokenID" value="${voxeo.tokenID}" /> -->
		<property name="maxThreads" value="${voxeo.maxThreads}" />
	</bean>
	<bean id="callServiceMessageSender" class="${callServiceMessageSender}">
		<property name="phoneServerURL" value="${voxeo.phoneServerURL}" />
		<property name="callerID" value="${voxeo.callerID}" />
		<property name="tokenID" value="${voxeo.tokenID}" />
	</bean>
	<!-- QUARTZ (jobs and triggers) -->
	<bean id="baseAlertJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		<property name="jobClass"
			value="com.inthinc.pro.scheduler.quartz.BaseAlertJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="alertMessageDAO" value-ref="alertMessageDAO" />
				<entry key="mailDispatcher" value-ref="mailDispatcher" />
				<entry key="phoneDispatcher" value-ref="phoneDispatcher" />
				<entry key="formSubmissionsURL" value="${forms.submissions.path}"/>
			</map>
		</property>
	</bean>

	<bean name="emailAlertJob" class="org.springframework.scheduling.quartz.JobDetailBean"
		parent="baseAlertJob">
		<property name="jobClass"
			value="com.inthinc.pro.scheduler.quartz.EmailAlertJob" />
	</bean>

    <bean name="emailReportAmazonPushJob" class="org.springframework.scheduling.quartz.JobDetailBean"
          parent="baseAlertJob">
        <property name="jobClass"
                  value="com.inthinc.pro.scheduler.quartz.EmailReportAmazonPushJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="reportScheduleDAO" value-ref="reportScheduleDAO" />
                <entry key="userDAO" value-ref="userDAO" />
                <entry key="accountDAO" value-ref="accountDAO" />
                <entry key="webContextPath" value="${contextPath.web}" />
                <entry key="amazonQueue"  value-ref="amazonQueue" />
                <entry key="enabled" value="${scheduler.enabled}" />
            </map>
        </property>
    </bean>

    <bean name="emailReportAmazonPullJob" class="org.springframework.scheduling.quartz.JobDetailBean"
          parent="baseAlertJob">
        <property name="jobClass"
                  value="com.inthinc.pro.scheduler.quartz.EmailReportAmazonPullJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="reportCreator" value-ref="reportCreator" />
                <entry key="reportCriteriaService" value-ref="reportCriteriaService" />
                <entry key="reportScheduleDAO" value-ref="reportScheduleDAO" />
                <entry key="userDAO" value-ref="userDAO" />
                <entry key="accountDAO" value-ref="accountDAO" />
                <entry key="groupDAO" value-ref="groupDAO" />
                <entry key="driverDAO" value-ref="driverDAO" />
                <entry key="webContextPath" value="${contextPath.web}" />
                <entry key="encryptPassword" value="j$2yptt3xt3ncrypt0r23cr3tp422w0rd" />
                <entry key="personDAO" value-ref="personDAO" />
                <entry key="amazonQueue"  value-ref="amazonQueue" />
                <entry key="reportLogData" value-ref="jsonReportLogData"/>
                <entry key="enabled" value="${scheduler.enabled}" />
            </map>
        </property>
    </bean>

	<bean name="smsAlertJob" class="org.springframework.scheduling.quartz.JobDetailBean"
		parent="baseAlertJob">
		<property name="jobClass" value="com.inthinc.pro.scheduler.quartz.SMSAlertJob" />
	</bean>

	<bean name="phoneAlertJob" class="org.springframework.scheduling.quartz.JobDetailBean"
		parent="baseAlertJob">
		<property name="jobClass"
			value="com.inthinc.pro.scheduler.quartz.PhoneAlertJob" />
	</bean>


	<bean name="zonePublishJob" class="org.springframework.scheduling.quartz.JobDetailBean"
		parent="baseAlertJob">
		<property name="jobClass"
			value="com.inthinc.pro.scheduler.quartz.ZonePublishJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="accountDAO" value-ref="accountDAO" />
				<entry key="zoneDAO" value-ref="zoneDAO" />
				<entry key="zonePublishDAO" value-ref="zonePublishDAO" />
			</map>
		</property>
	</bean>

	<bean name="aggregationJob" class="org.springframework.scheduling.quartz.JobDetailBean"
		parent="baseAlertJob">
		<property name="jobClass"
			value="com.inthinc.pro.scheduler.quartz.AggregationJob" />
	</bean>

	<bean name="stateMileageAggregationJob" class="org.springframework.scheduling.quartz.JobDetailBean"
		parent="baseAlertJob">
		<property name="jobClass"
			value="com.inthinc.pro.scheduler.quartz.StateMileageAggregationJob" />
	</bean>

    <bean id="emailReportAmazonPushCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="emailReportAmazonPushJob" />
        <property name="cronExpression" value="${cron.emailReportAmazonPush}" />
    </bean>

    <bean id="emailReportAmazonPullCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="emailReportAmazonPullJob" />
        <property name="cronExpression" value="${cron.emailReportAmazonPull}" />
    </bean>

	<bean id="emailMessageCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="emailAlertJob" />
		<!-- run every odd minute -->
		<property name="cronExpression" value="${cron.emailAlert}" />
	</bean>

	<bean id="smsMessageCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="smsAlertJob" />
		<!-- run every even minute -->
		<property name="cronExpression" value="${cron.smsAlert}" />
	</bean>

	<bean id="phoneMessageCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="phoneAlertJob" />
		<!-- run every odd minute - 30 seconds into it -->
		<property name="cronExpression" value="${cron.phoneAlert}" />
	</bean>

	<bean id="zonePublishCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="zonePublishJob" />
		<property name="cronExpression" value="${cron.zonePublish}" />
	</bean>

	<bean id="aggregationCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="aggregationJob" />
		<property name="cronExpression" value="${cron.aggregation}" />
	</bean>

	<bean id="stateMileageAggregationCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="stateMileageAggregationJob" />
		<property name="cronExpression" value="${cron.stateMileageAggregation}" />
	</bean>

	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false">
		<property name="triggers">
			<list>
				<ref bean="emailMessageCronTrigger" />
				<ref bean="smsMessageCronTrigger" />
				<ref bean="phoneMessageCronTrigger" />
                <ref bean="emailReportAmazonPushCronTrigger" />
                <ref bean="emailReportAmazonPullCronTrigger" />
				<ref bean="zonePublishCronTrigger" />
				<ref bean="aggregationCronTrigger" />
				<ref bean="stateMileageAggregationCronTrigger" />
			</list>
		</property>
	</bean>

	<!-- QUARTZ END -->
<!-- 
	<bean id="googleMapFinderBean" class="com.inthinc.pro.map.SimpleGoogleMapKeyFinder">
		<property name="key" value="${googleMapKey}" />
	</bean>
 -->
 
  <bean id="reportAddressLookupBean" class="com.inthinc.pro.map.ReportAddressLookupBean">
    <property name="enableGoogleMapsInReports" value="${enableGoogleMapsInReports}"/>
    <property name="reportAddressLookupBean" ref="${reportAddressLookup}"></property>
    <property name="disabledGoogleMapsInReportsAddressLookupBean" ref="${disabledGoogleMapsInReportsAddressLookup}"></property>
  </bean>


    <bean id="driverPerformanceDAO" class="com.inthinc.pro.dao.report.impl.DriverPerformanceDAOImpl"/>
    
	<!--  hos -->
	<bean id="RuleSetFactory" class="com.inthinc.hos.rules.RuleSetFactory">
		<!-- <property name="effectiveDateForUS2013Changes" value="${hos.usrules.effective.date}"/> -->
		<property name="effectiveDateForUS2013ChangesBigResetPreWeek" value="${hos.usrules.effective.date.BIG_RESET_PER_WEEK}" />
		<property name="effectiveDateForUS2013ChangesBigReset1am5am" value="${hos.usrules.effective.date.BIG_RESET_1AM_5AM}" />
		<property name="effectiveDateForUS2013ChangesRestBreak8Hrs" value="${hos.usrules.effective.date.REST_BREAK_8_HRS}" />
		<property name="effectiveDateForUS2013ChangesPassengerException" value="${hos.usrules.effective.date.PASSENGER_EXCEPTION}" />
  	</bean>

    <!-- Amazon Queue -->
    <!--
       Amazon clients use the DefaultAWSCredentialsProviderChain to find AWS credentials. It first looks
       for environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_KEY, then system properties aws.accessKeyId and aws.secretKey, and finally
       uses the amazon ec2 metadata client to try and find credentials. So not to place our individual credentials in the project, setup your
       environment variables to contain your aws credentials.
    -->
    <bean id="amazonSQSClient" class="com.amazonaws.services.sqs.AmazonSQSClient"/>

    <bean id="amazonQueue" class="com.inthinc.pro.scheduler.amazonaws.sqs.AmazonQueueImpl">
        <property name="amazonSQSClient" ref="amazonSQSClient" />
        <property name="queueName" value="${AMAZONQUEUE_EMAILREPORT_QUEUENAME}" />
    </bean>

    <bean id="amazonQueueLocal" class="com.inthinc.pro.scheduler.amazonaws.sqs.AmazonQueueImplLocal">
        <!-- This property holds the pre-configured messages of the queue -->
        <property name="messageMap">
            <map>
                <entry key="key" value="value"/>
            </map>
        </property>
    </bean>

    <!-- Report log data -->
    <!--
       Used to store information about a report and to export this information in JSON.
    -->

    <bean id="jsonReportLogData" class="com.inthinc.pro.scheduler.data.JSONReportLogData"/>

</beans>
