package com.inthinc.pro.model;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public enum AlertMessageType implements BaseEnum
{
    ALERT_TYPE_SPEEDING(1, "ALERT_TYPE_SPEEDING"),
    ALERT_TYPE_AGGRESSIVE_DRIVING(2, "ALERT_TYPE_AGGRESSIVE_DRIVING"),
    ALERT_TYPE_SEATBELT(3, "ALERT_TYPE_SEATBELT"),
    ALERT_TYPE_ENTER_ZONE(4, "ALERT_TYPE_ENTER_ZONE"),
    ALERT_TYPE_EXIT_ZONE(5, "ALERT_TYPE_EXIT_ZONE"),
    ALERT_TYPE_LOW_BATTERY(6, "ALERT_TYPE_LOW_BATTERY"),
    ALERT_TYPE_UNKNOWN(7, "ALERT_TYPE_UNKNOWN"),
    ALERT_TYPE_TAMPERING(8, "ALERT_TYPE_TAMPERING"),
    ALERT_TYPE_CRASH(9, "ALERT_TYPE_CRASH"),
    ALERT_TYPE_HARD_BRAKE(10, "ALERT_TYPE_HARD_BRAKE"),
    ALERT_TYPE_HARD_ACCELL(11, "ALERT_TYPE_HARD_ACCELL"),
    ALERT_TYPE_HARD_TURN(12, "ALERT_TYPE_HARD_TURN"),
    ALERT_TYPE_HARD_BUMP(13, "ALERT_TYPE_HARD_BUMP"),
    ALERT_TYPE_NO_DRIVER(14, "ALERT_TYPE_NO_DRIVER"),
    ALERT_TYPE_OFFHOUR(15, "ALERT_TYPE_OFFHOUR"),
    
    ALERT_TYPE_COMPLIANCE(16, "ALERT_TYPE_COMPLIANCE"),
    ALERT_TYPE_PARKING_BRAKE(16, "ALERT_TYPE_PARKING_BRAKE"),
    ALERT_TYPE_WAYSMART_HARD_ACCEL(17, "ALERT_TYPE_WAYSMART_HARD_ACCEL"),
    ALERT_TYPE_WAYSMART_HARD_VERTICAL(18, "ALERT_TYPE_HARD_VERTICAL"),
    ALERT_TYPE_FULL_EVENT(19, "ALERT_TYPE_FULL_EVENT"),   
    ALERT_TYPE_ROLLOVER(20, "ALERT_TYPE_ROLLOVER"),
    ALERT_TYPE_EMERGENCY(21, "ALERT_TYPE_EMERGENCY"),
    ALERT_TYPE_PANIC(22, "ALERT_TYPE_PANIC"),   
    ALERT_TYPE_AUTOMATIC_MAN_DOWN(23, "ALERT_TYPE_AUTOMATIC_MAN_DOWN"),   
    ALERT_TYPE_AUTOMATIC_MAN_DOWN_OK(24, "ALERT_TYPE_AUTOMATIC_MAN_DOWN_OK"),   
    ALERT_TYPE_MAN_DOWN(25, "ALERT_TYPE_MAN_DOWN"),   
    ALERT_TYPE_MAN_DOWN_OK(26, "ALERT_TYPE_MAN_DOWN_OK"),   
    ALERT_TYPE_MAN_DOWN_CANCELLED(27, "ALERT_TYPE_MAN_DOWN_CANCELLED"),   
    ALERT_TYPE_WAYSMART_ZONE_ARRIVAL(28, "ALERT_TYPE_WAYSMART_ZONE_ARRIVAL"),   
    ALERT_TYPE_WAYSMART_ZONE_DEPARTURE(29, "ALERT_TYPE_WAYSMART_ZONE_DEPARTURE"),   
    ALERT_TYPE_IGNITION_ON(30, "ALERT_TYPE_IGNITION_ON"),   
    ALERT_TYPE_LOW_BATTERY_POTENTIAL_TAMPERING(31, "ALERT_TYPE_LOW_BATTERY_POTENTIAL_TAMPERING"),   
    ALERT_TYPE_HOS_DOT_STOPPED(32, "ALERT_TYPE_HOS_DOT_STOPPED"),
    ALERT_TYPE_HOS_NO_HOURS_REMAINING(33, "ALERT_TYPE_HOS_NO_HOURS_REMAINING"),
    ALERT_TYPE_TEXT_MESSAGE(34, "ALERT_TYPE_TEXT_MESSAGE"),
    ALERT_TYPE_WIRELINE_ALARM(35, "ALERT_TYPE_WIRELINE_ALARM"),
    ALERT_TYPE_DSS_MICROSLEEP(36, "ALERT_TYPE_DSS_MICROSLEEP"),
    ALERT_TYPE_INSTALL(37, "ALERT_TYPE_INSTALL"),
    ALERT_TYPE_FIRMWARE_CURRENT(38, "ALERT_TYPE_FIRMWARE_CURRENT"),
    ALERT_TYPE_LOCATION_DEBUG(39, "ALERT_TYPE_LOCATION_DEBUG"),
    ALERT_TYPE_QSI_UPDATED(40, "ALERT_TYPE_QSI_UPDATED"),
    ALERT_TYPE_WITNESS_UPDATED(41, "ALERT_TYPE_WITNESS_UPDATED"),
    ALERT_TYPE_ZONES_CURRENT(42, "ALERT_TYPE_ZONES_CURRENT"),
    ALERT_TYPE_NO_INTERNAL_THUMB_DRIVE(43, "ALERT_TYPE_NO_INTERNAL_THUMB_DRIVE"),
    ALERT_TYPE_WITNESS_HEARTBEAT_VIOLATION(44, "ALERT_TYPE_WITNESS_HEARTBEAT_VIOLATION"),
    ALERT_TYPE_TEXT_MESSAGE_RECEIVED(45, "ALERT_TYPE_TEXT_MESSAGE_RECEIVED"),
    ALERT_TYPE_FATIGUE(46, "ALERT_TYPE_FATIGUE"),
    ALERT_TYPE_INSTALLATION(47, "ALERT_TYPE_INSTALLATION"),
    ALERT_TYPE_ZONES(48,"ALERT_TYPE_ZONES"),
    ALERT_TYPE_HOS(49,"ALERT_TYPE_HOS"),
    ALERT_TYPE_VEHICLE(50,"ALERT_TYPE_VEHICLE"),
    ALERT_TYPE_WIRELINE(51,"ALERT_TYPE_WIRELINE"),
    ALERT_TYPE_OFFHOURSDRIVING(52,"OFFHOURSDRIVING");
      
    private String description;
    private int code;

    private AlertMessageType(int code, String description)
    {
        this.code = code;
        this.description = description;
    }

    private static final Map<Integer, AlertMessageType> lookup = new HashMap<Integer, AlertMessageType>();
    static
    {
        for (AlertMessageType p : EnumSet.allOf(AlertMessageType.class))
        {
            lookup.put(p.code, p);
        }
    }

    public Integer getCode()
    {
        return this.code;
    }

    public static AlertMessageType valueOf(Integer code)
    {
        return lookup.get(code);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder(this.getClass().getSimpleName());
        sb.append(".");
        sb.append(this.name());
        return sb.toString();
    }

    public String getDescription()
    {
        return description;
    }

}
